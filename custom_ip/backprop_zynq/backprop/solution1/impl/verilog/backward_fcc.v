// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="backward_fcc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=3,HLS_SYN_FF=4171,HLS_SYN_LUT=4909,HLS_VERSION=2019_2}" *)

module backward_fcc (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_x_AWVALID,
        m_axi_x_AWREADY,
        m_axi_x_AWADDR,
        m_axi_x_AWID,
        m_axi_x_AWLEN,
        m_axi_x_AWSIZE,
        m_axi_x_AWBURST,
        m_axi_x_AWLOCK,
        m_axi_x_AWCACHE,
        m_axi_x_AWPROT,
        m_axi_x_AWQOS,
        m_axi_x_AWREGION,
        m_axi_x_AWUSER,
        m_axi_x_WVALID,
        m_axi_x_WREADY,
        m_axi_x_WDATA,
        m_axi_x_WSTRB,
        m_axi_x_WLAST,
        m_axi_x_WID,
        m_axi_x_WUSER,
        m_axi_x_ARVALID,
        m_axi_x_ARREADY,
        m_axi_x_ARADDR,
        m_axi_x_ARID,
        m_axi_x_ARLEN,
        m_axi_x_ARSIZE,
        m_axi_x_ARBURST,
        m_axi_x_ARLOCK,
        m_axi_x_ARCACHE,
        m_axi_x_ARPROT,
        m_axi_x_ARQOS,
        m_axi_x_ARREGION,
        m_axi_x_ARUSER,
        m_axi_x_RVALID,
        m_axi_x_RREADY,
        m_axi_x_RDATA,
        m_axi_x_RLAST,
        m_axi_x_RID,
        m_axi_x_RUSER,
        m_axi_x_RRESP,
        m_axi_x_BVALID,
        m_axi_x_BREADY,
        m_axi_x_BRESP,
        m_axi_x_BID,
        m_axi_x_BUSER,
        m_axi_w_AWVALID,
        m_axi_w_AWREADY,
        m_axi_w_AWADDR,
        m_axi_w_AWID,
        m_axi_w_AWLEN,
        m_axi_w_AWSIZE,
        m_axi_w_AWBURST,
        m_axi_w_AWLOCK,
        m_axi_w_AWCACHE,
        m_axi_w_AWPROT,
        m_axi_w_AWQOS,
        m_axi_w_AWREGION,
        m_axi_w_AWUSER,
        m_axi_w_WVALID,
        m_axi_w_WREADY,
        m_axi_w_WDATA,
        m_axi_w_WSTRB,
        m_axi_w_WLAST,
        m_axi_w_WID,
        m_axi_w_WUSER,
        m_axi_w_ARVALID,
        m_axi_w_ARREADY,
        m_axi_w_ARADDR,
        m_axi_w_ARID,
        m_axi_w_ARLEN,
        m_axi_w_ARSIZE,
        m_axi_w_ARBURST,
        m_axi_w_ARLOCK,
        m_axi_w_ARCACHE,
        m_axi_w_ARPROT,
        m_axi_w_ARQOS,
        m_axi_w_ARREGION,
        m_axi_w_ARUSER,
        m_axi_w_RVALID,
        m_axi_w_RREADY,
        m_axi_w_RDATA,
        m_axi_w_RLAST,
        m_axi_w_RID,
        m_axi_w_RUSER,
        m_axi_w_RRESP,
        m_axi_w_BVALID,
        m_axi_w_BREADY,
        m_axi_w_BRESP,
        m_axi_w_BID,
        m_axi_w_BUSER,
        m_axi_y_AWVALID,
        m_axi_y_AWREADY,
        m_axi_y_AWADDR,
        m_axi_y_AWID,
        m_axi_y_AWLEN,
        m_axi_y_AWSIZE,
        m_axi_y_AWBURST,
        m_axi_y_AWLOCK,
        m_axi_y_AWCACHE,
        m_axi_y_AWPROT,
        m_axi_y_AWQOS,
        m_axi_y_AWREGION,
        m_axi_y_AWUSER,
        m_axi_y_WVALID,
        m_axi_y_WREADY,
        m_axi_y_WDATA,
        m_axi_y_WSTRB,
        m_axi_y_WLAST,
        m_axi_y_WID,
        m_axi_y_WUSER,
        m_axi_y_ARVALID,
        m_axi_y_ARREADY,
        m_axi_y_ARADDR,
        m_axi_y_ARID,
        m_axi_y_ARLEN,
        m_axi_y_ARSIZE,
        m_axi_y_ARBURST,
        m_axi_y_ARLOCK,
        m_axi_y_ARCACHE,
        m_axi_y_ARPROT,
        m_axi_y_ARQOS,
        m_axi_y_ARREGION,
        m_axi_y_ARUSER,
        m_axi_y_RVALID,
        m_axi_y_RREADY,
        m_axi_y_RDATA,
        m_axi_y_RLAST,
        m_axi_y_RID,
        m_axi_y_RUSER,
        m_axi_y_RRESP,
        m_axi_y_BVALID,
        m_axi_y_BREADY,
        m_axi_y_BRESP,
        m_axi_y_BID,
        m_axi_y_BUSER,
        m_axi_b_AWVALID,
        m_axi_b_AWREADY,
        m_axi_b_AWADDR,
        m_axi_b_AWID,
        m_axi_b_AWLEN,
        m_axi_b_AWSIZE,
        m_axi_b_AWBURST,
        m_axi_b_AWLOCK,
        m_axi_b_AWCACHE,
        m_axi_b_AWPROT,
        m_axi_b_AWQOS,
        m_axi_b_AWREGION,
        m_axi_b_AWUSER,
        m_axi_b_WVALID,
        m_axi_b_WREADY,
        m_axi_b_WDATA,
        m_axi_b_WSTRB,
        m_axi_b_WLAST,
        m_axi_b_WID,
        m_axi_b_WUSER,
        m_axi_b_ARVALID,
        m_axi_b_ARREADY,
        m_axi_b_ARADDR,
        m_axi_b_ARID,
        m_axi_b_ARLEN,
        m_axi_b_ARSIZE,
        m_axi_b_ARBURST,
        m_axi_b_ARLOCK,
        m_axi_b_ARCACHE,
        m_axi_b_ARPROT,
        m_axi_b_ARQOS,
        m_axi_b_ARREGION,
        m_axi_b_ARUSER,
        m_axi_b_RVALID,
        m_axi_b_RREADY,
        m_axi_b_RDATA,
        m_axi_b_RLAST,
        m_axi_b_RID,
        m_axi_b_RUSER,
        m_axi_b_RRESP,
        m_axi_b_BVALID,
        m_axi_b_BREADY,
        m_axi_b_BRESP,
        m_axi_b_BID,
        m_axi_b_BUSER,
        m_axi_dx_AWVALID,
        m_axi_dx_AWREADY,
        m_axi_dx_AWADDR,
        m_axi_dx_AWID,
        m_axi_dx_AWLEN,
        m_axi_dx_AWSIZE,
        m_axi_dx_AWBURST,
        m_axi_dx_AWLOCK,
        m_axi_dx_AWCACHE,
        m_axi_dx_AWPROT,
        m_axi_dx_AWQOS,
        m_axi_dx_AWREGION,
        m_axi_dx_AWUSER,
        m_axi_dx_WVALID,
        m_axi_dx_WREADY,
        m_axi_dx_WDATA,
        m_axi_dx_WSTRB,
        m_axi_dx_WLAST,
        m_axi_dx_WID,
        m_axi_dx_WUSER,
        m_axi_dx_ARVALID,
        m_axi_dx_ARREADY,
        m_axi_dx_ARADDR,
        m_axi_dx_ARID,
        m_axi_dx_ARLEN,
        m_axi_dx_ARSIZE,
        m_axi_dx_ARBURST,
        m_axi_dx_ARLOCK,
        m_axi_dx_ARCACHE,
        m_axi_dx_ARPROT,
        m_axi_dx_ARQOS,
        m_axi_dx_ARREGION,
        m_axi_dx_ARUSER,
        m_axi_dx_RVALID,
        m_axi_dx_RREADY,
        m_axi_dx_RDATA,
        m_axi_dx_RLAST,
        m_axi_dx_RID,
        m_axi_dx_RUSER,
        m_axi_dx_RRESP,
        m_axi_dx_BVALID,
        m_axi_dx_BREADY,
        m_axi_dx_BRESP,
        m_axi_dx_BID,
        m_axi_dx_BUSER,
        m_axi_dy_AWVALID,
        m_axi_dy_AWREADY,
        m_axi_dy_AWADDR,
        m_axi_dy_AWID,
        m_axi_dy_AWLEN,
        m_axi_dy_AWSIZE,
        m_axi_dy_AWBURST,
        m_axi_dy_AWLOCK,
        m_axi_dy_AWCACHE,
        m_axi_dy_AWPROT,
        m_axi_dy_AWQOS,
        m_axi_dy_AWREGION,
        m_axi_dy_AWUSER,
        m_axi_dy_WVALID,
        m_axi_dy_WREADY,
        m_axi_dy_WDATA,
        m_axi_dy_WSTRB,
        m_axi_dy_WLAST,
        m_axi_dy_WID,
        m_axi_dy_WUSER,
        m_axi_dy_ARVALID,
        m_axi_dy_ARREADY,
        m_axi_dy_ARADDR,
        m_axi_dy_ARID,
        m_axi_dy_ARLEN,
        m_axi_dy_ARSIZE,
        m_axi_dy_ARBURST,
        m_axi_dy_ARLOCK,
        m_axi_dy_ARCACHE,
        m_axi_dy_ARPROT,
        m_axi_dy_ARQOS,
        m_axi_dy_ARREGION,
        m_axi_dy_ARUSER,
        m_axi_dy_RVALID,
        m_axi_dy_RREADY,
        m_axi_dy_RDATA,
        m_axi_dy_RLAST,
        m_axi_dy_RID,
        m_axi_dy_RUSER,
        m_axi_dy_RRESP,
        m_axi_dy_BVALID,
        m_axi_dy_BREADY,
        m_axi_dy_BRESP,
        m_axi_dy_BID,
        m_axi_dy_BUSER,
        m_axi_db_AWVALID,
        m_axi_db_AWREADY,
        m_axi_db_AWADDR,
        m_axi_db_AWID,
        m_axi_db_AWLEN,
        m_axi_db_AWSIZE,
        m_axi_db_AWBURST,
        m_axi_db_AWLOCK,
        m_axi_db_AWCACHE,
        m_axi_db_AWPROT,
        m_axi_db_AWQOS,
        m_axi_db_AWREGION,
        m_axi_db_AWUSER,
        m_axi_db_WVALID,
        m_axi_db_WREADY,
        m_axi_db_WDATA,
        m_axi_db_WSTRB,
        m_axi_db_WLAST,
        m_axi_db_WID,
        m_axi_db_WUSER,
        m_axi_db_ARVALID,
        m_axi_db_ARREADY,
        m_axi_db_ARADDR,
        m_axi_db_ARID,
        m_axi_db_ARLEN,
        m_axi_db_ARSIZE,
        m_axi_db_ARBURST,
        m_axi_db_ARLOCK,
        m_axi_db_ARCACHE,
        m_axi_db_ARPROT,
        m_axi_db_ARQOS,
        m_axi_db_ARREGION,
        m_axi_db_ARUSER,
        m_axi_db_RVALID,
        m_axi_db_RREADY,
        m_axi_db_RDATA,
        m_axi_db_RLAST,
        m_axi_db_RID,
        m_axi_db_RUSER,
        m_axi_db_RRESP,
        m_axi_db_BVALID,
        m_axi_db_BREADY,
        m_axi_db_BRESP,
        m_axi_db_BID,
        m_axi_db_BUSER,
        m_axi_dw_AWVALID,
        m_axi_dw_AWREADY,
        m_axi_dw_AWADDR,
        m_axi_dw_AWID,
        m_axi_dw_AWLEN,
        m_axi_dw_AWSIZE,
        m_axi_dw_AWBURST,
        m_axi_dw_AWLOCK,
        m_axi_dw_AWCACHE,
        m_axi_dw_AWPROT,
        m_axi_dw_AWQOS,
        m_axi_dw_AWREGION,
        m_axi_dw_AWUSER,
        m_axi_dw_WVALID,
        m_axi_dw_WREADY,
        m_axi_dw_WDATA,
        m_axi_dw_WSTRB,
        m_axi_dw_WLAST,
        m_axi_dw_WID,
        m_axi_dw_WUSER,
        m_axi_dw_ARVALID,
        m_axi_dw_ARREADY,
        m_axi_dw_ARADDR,
        m_axi_dw_ARID,
        m_axi_dw_ARLEN,
        m_axi_dw_ARSIZE,
        m_axi_dw_ARBURST,
        m_axi_dw_ARLOCK,
        m_axi_dw_ARCACHE,
        m_axi_dw_ARPROT,
        m_axi_dw_ARQOS,
        m_axi_dw_ARREGION,
        m_axi_dw_ARUSER,
        m_axi_dw_RVALID,
        m_axi_dw_RREADY,
        m_axi_dw_RDATA,
        m_axi_dw_RLAST,
        m_axi_dw_RID,
        m_axi_dw_RUSER,
        m_axi_dw_RRESP,
        m_axi_dw_BVALID,
        m_axi_dw_BREADY,
        m_axi_dw_BRESP,
        m_axi_dw_BID,
        m_axi_dw_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_X_ID_WIDTH = 1;
parameter    C_M_AXI_X_ADDR_WIDTH = 32;
parameter    C_M_AXI_X_DATA_WIDTH = 32;
parameter    C_M_AXI_X_AWUSER_WIDTH = 1;
parameter    C_M_AXI_X_ARUSER_WIDTH = 1;
parameter    C_M_AXI_X_WUSER_WIDTH = 1;
parameter    C_M_AXI_X_RUSER_WIDTH = 1;
parameter    C_M_AXI_X_BUSER_WIDTH = 1;
parameter    C_M_AXI_X_TARGET_ADDR = 0;
parameter    C_M_AXI_X_USER_VALUE = 0;
parameter    C_M_AXI_X_PROT_VALUE = 0;
parameter    C_M_AXI_X_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_W_ID_WIDTH = 1;
parameter    C_M_AXI_W_ADDR_WIDTH = 32;
parameter    C_M_AXI_W_DATA_WIDTH = 32;
parameter    C_M_AXI_W_AWUSER_WIDTH = 1;
parameter    C_M_AXI_W_ARUSER_WIDTH = 1;
parameter    C_M_AXI_W_WUSER_WIDTH = 1;
parameter    C_M_AXI_W_RUSER_WIDTH = 1;
parameter    C_M_AXI_W_BUSER_WIDTH = 1;
parameter    C_M_AXI_W_TARGET_ADDR = 0;
parameter    C_M_AXI_W_USER_VALUE = 0;
parameter    C_M_AXI_W_PROT_VALUE = 0;
parameter    C_M_AXI_W_CACHE_VALUE = 3;
parameter    C_M_AXI_Y_ID_WIDTH = 1;
parameter    C_M_AXI_Y_ADDR_WIDTH = 32;
parameter    C_M_AXI_Y_DATA_WIDTH = 32;
parameter    C_M_AXI_Y_AWUSER_WIDTH = 1;
parameter    C_M_AXI_Y_ARUSER_WIDTH = 1;
parameter    C_M_AXI_Y_WUSER_WIDTH = 1;
parameter    C_M_AXI_Y_RUSER_WIDTH = 1;
parameter    C_M_AXI_Y_BUSER_WIDTH = 1;
parameter    C_M_AXI_Y_TARGET_ADDR = 0;
parameter    C_M_AXI_Y_USER_VALUE = 0;
parameter    C_M_AXI_Y_PROT_VALUE = 0;
parameter    C_M_AXI_Y_CACHE_VALUE = 3;
parameter    C_M_AXI_B_ID_WIDTH = 1;
parameter    C_M_AXI_B_ADDR_WIDTH = 32;
parameter    C_M_AXI_B_DATA_WIDTH = 32;
parameter    C_M_AXI_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_TARGET_ADDR = 0;
parameter    C_M_AXI_B_USER_VALUE = 0;
parameter    C_M_AXI_B_PROT_VALUE = 0;
parameter    C_M_AXI_B_CACHE_VALUE = 3;
parameter    C_M_AXI_DX_ID_WIDTH = 1;
parameter    C_M_AXI_DX_ADDR_WIDTH = 32;
parameter    C_M_AXI_DX_DATA_WIDTH = 32;
parameter    C_M_AXI_DX_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DX_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DX_WUSER_WIDTH = 1;
parameter    C_M_AXI_DX_RUSER_WIDTH = 1;
parameter    C_M_AXI_DX_BUSER_WIDTH = 1;
parameter    C_M_AXI_DX_TARGET_ADDR = 0;
parameter    C_M_AXI_DX_USER_VALUE = 0;
parameter    C_M_AXI_DX_PROT_VALUE = 0;
parameter    C_M_AXI_DX_CACHE_VALUE = 3;
parameter    C_M_AXI_DY_ID_WIDTH = 1;
parameter    C_M_AXI_DY_ADDR_WIDTH = 32;
parameter    C_M_AXI_DY_DATA_WIDTH = 32;
parameter    C_M_AXI_DY_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DY_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DY_WUSER_WIDTH = 1;
parameter    C_M_AXI_DY_RUSER_WIDTH = 1;
parameter    C_M_AXI_DY_BUSER_WIDTH = 1;
parameter    C_M_AXI_DY_TARGET_ADDR = 0;
parameter    C_M_AXI_DY_USER_VALUE = 0;
parameter    C_M_AXI_DY_PROT_VALUE = 0;
parameter    C_M_AXI_DY_CACHE_VALUE = 3;
parameter    C_M_AXI_DB_ID_WIDTH = 1;
parameter    C_M_AXI_DB_ADDR_WIDTH = 32;
parameter    C_M_AXI_DB_DATA_WIDTH = 32;
parameter    C_M_AXI_DB_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DB_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DB_WUSER_WIDTH = 1;
parameter    C_M_AXI_DB_RUSER_WIDTH = 1;
parameter    C_M_AXI_DB_BUSER_WIDTH = 1;
parameter    C_M_AXI_DB_TARGET_ADDR = 0;
parameter    C_M_AXI_DB_USER_VALUE = 0;
parameter    C_M_AXI_DB_PROT_VALUE = 0;
parameter    C_M_AXI_DB_CACHE_VALUE = 3;
parameter    C_M_AXI_DW_ID_WIDTH = 1;
parameter    C_M_AXI_DW_ADDR_WIDTH = 32;
parameter    C_M_AXI_DW_DATA_WIDTH = 32;
parameter    C_M_AXI_DW_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DW_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DW_WUSER_WIDTH = 1;
parameter    C_M_AXI_DW_RUSER_WIDTH = 1;
parameter    C_M_AXI_DW_BUSER_WIDTH = 1;
parameter    C_M_AXI_DW_TARGET_ADDR = 0;
parameter    C_M_AXI_DW_USER_VALUE = 0;
parameter    C_M_AXI_DW_PROT_VALUE = 0;
parameter    C_M_AXI_DW_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_X_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_W_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_Y_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DX_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DY_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DB_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DW_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_x_AWVALID;
input   m_axi_x_AWREADY;
output  [C_M_AXI_X_ADDR_WIDTH - 1:0] m_axi_x_AWADDR;
output  [C_M_AXI_X_ID_WIDTH - 1:0] m_axi_x_AWID;
output  [7:0] m_axi_x_AWLEN;
output  [2:0] m_axi_x_AWSIZE;
output  [1:0] m_axi_x_AWBURST;
output  [1:0] m_axi_x_AWLOCK;
output  [3:0] m_axi_x_AWCACHE;
output  [2:0] m_axi_x_AWPROT;
output  [3:0] m_axi_x_AWQOS;
output  [3:0] m_axi_x_AWREGION;
output  [C_M_AXI_X_AWUSER_WIDTH - 1:0] m_axi_x_AWUSER;
output   m_axi_x_WVALID;
input   m_axi_x_WREADY;
output  [C_M_AXI_X_DATA_WIDTH - 1:0] m_axi_x_WDATA;
output  [C_M_AXI_X_WSTRB_WIDTH - 1:0] m_axi_x_WSTRB;
output   m_axi_x_WLAST;
output  [C_M_AXI_X_ID_WIDTH - 1:0] m_axi_x_WID;
output  [C_M_AXI_X_WUSER_WIDTH - 1:0] m_axi_x_WUSER;
output   m_axi_x_ARVALID;
input   m_axi_x_ARREADY;
output  [C_M_AXI_X_ADDR_WIDTH - 1:0] m_axi_x_ARADDR;
output  [C_M_AXI_X_ID_WIDTH - 1:0] m_axi_x_ARID;
output  [7:0] m_axi_x_ARLEN;
output  [2:0] m_axi_x_ARSIZE;
output  [1:0] m_axi_x_ARBURST;
output  [1:0] m_axi_x_ARLOCK;
output  [3:0] m_axi_x_ARCACHE;
output  [2:0] m_axi_x_ARPROT;
output  [3:0] m_axi_x_ARQOS;
output  [3:0] m_axi_x_ARREGION;
output  [C_M_AXI_X_ARUSER_WIDTH - 1:0] m_axi_x_ARUSER;
input   m_axi_x_RVALID;
output   m_axi_x_RREADY;
input  [C_M_AXI_X_DATA_WIDTH - 1:0] m_axi_x_RDATA;
input   m_axi_x_RLAST;
input  [C_M_AXI_X_ID_WIDTH - 1:0] m_axi_x_RID;
input  [C_M_AXI_X_RUSER_WIDTH - 1:0] m_axi_x_RUSER;
input  [1:0] m_axi_x_RRESP;
input   m_axi_x_BVALID;
output   m_axi_x_BREADY;
input  [1:0] m_axi_x_BRESP;
input  [C_M_AXI_X_ID_WIDTH - 1:0] m_axi_x_BID;
input  [C_M_AXI_X_BUSER_WIDTH - 1:0] m_axi_x_BUSER;
output   m_axi_w_AWVALID;
input   m_axi_w_AWREADY;
output  [C_M_AXI_W_ADDR_WIDTH - 1:0] m_axi_w_AWADDR;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_w_AWID;
output  [7:0] m_axi_w_AWLEN;
output  [2:0] m_axi_w_AWSIZE;
output  [1:0] m_axi_w_AWBURST;
output  [1:0] m_axi_w_AWLOCK;
output  [3:0] m_axi_w_AWCACHE;
output  [2:0] m_axi_w_AWPROT;
output  [3:0] m_axi_w_AWQOS;
output  [3:0] m_axi_w_AWREGION;
output  [C_M_AXI_W_AWUSER_WIDTH - 1:0] m_axi_w_AWUSER;
output   m_axi_w_WVALID;
input   m_axi_w_WREADY;
output  [C_M_AXI_W_DATA_WIDTH - 1:0] m_axi_w_WDATA;
output  [C_M_AXI_W_WSTRB_WIDTH - 1:0] m_axi_w_WSTRB;
output   m_axi_w_WLAST;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_w_WID;
output  [C_M_AXI_W_WUSER_WIDTH - 1:0] m_axi_w_WUSER;
output   m_axi_w_ARVALID;
input   m_axi_w_ARREADY;
output  [C_M_AXI_W_ADDR_WIDTH - 1:0] m_axi_w_ARADDR;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_w_ARID;
output  [7:0] m_axi_w_ARLEN;
output  [2:0] m_axi_w_ARSIZE;
output  [1:0] m_axi_w_ARBURST;
output  [1:0] m_axi_w_ARLOCK;
output  [3:0] m_axi_w_ARCACHE;
output  [2:0] m_axi_w_ARPROT;
output  [3:0] m_axi_w_ARQOS;
output  [3:0] m_axi_w_ARREGION;
output  [C_M_AXI_W_ARUSER_WIDTH - 1:0] m_axi_w_ARUSER;
input   m_axi_w_RVALID;
output   m_axi_w_RREADY;
input  [C_M_AXI_W_DATA_WIDTH - 1:0] m_axi_w_RDATA;
input   m_axi_w_RLAST;
input  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_w_RID;
input  [C_M_AXI_W_RUSER_WIDTH - 1:0] m_axi_w_RUSER;
input  [1:0] m_axi_w_RRESP;
input   m_axi_w_BVALID;
output   m_axi_w_BREADY;
input  [1:0] m_axi_w_BRESP;
input  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_w_BID;
input  [C_M_AXI_W_BUSER_WIDTH - 1:0] m_axi_w_BUSER;
output   m_axi_y_AWVALID;
input   m_axi_y_AWREADY;
output  [C_M_AXI_Y_ADDR_WIDTH - 1:0] m_axi_y_AWADDR;
output  [C_M_AXI_Y_ID_WIDTH - 1:0] m_axi_y_AWID;
output  [7:0] m_axi_y_AWLEN;
output  [2:0] m_axi_y_AWSIZE;
output  [1:0] m_axi_y_AWBURST;
output  [1:0] m_axi_y_AWLOCK;
output  [3:0] m_axi_y_AWCACHE;
output  [2:0] m_axi_y_AWPROT;
output  [3:0] m_axi_y_AWQOS;
output  [3:0] m_axi_y_AWREGION;
output  [C_M_AXI_Y_AWUSER_WIDTH - 1:0] m_axi_y_AWUSER;
output   m_axi_y_WVALID;
input   m_axi_y_WREADY;
output  [C_M_AXI_Y_DATA_WIDTH - 1:0] m_axi_y_WDATA;
output  [C_M_AXI_Y_WSTRB_WIDTH - 1:0] m_axi_y_WSTRB;
output   m_axi_y_WLAST;
output  [C_M_AXI_Y_ID_WIDTH - 1:0] m_axi_y_WID;
output  [C_M_AXI_Y_WUSER_WIDTH - 1:0] m_axi_y_WUSER;
output   m_axi_y_ARVALID;
input   m_axi_y_ARREADY;
output  [C_M_AXI_Y_ADDR_WIDTH - 1:0] m_axi_y_ARADDR;
output  [C_M_AXI_Y_ID_WIDTH - 1:0] m_axi_y_ARID;
output  [7:0] m_axi_y_ARLEN;
output  [2:0] m_axi_y_ARSIZE;
output  [1:0] m_axi_y_ARBURST;
output  [1:0] m_axi_y_ARLOCK;
output  [3:0] m_axi_y_ARCACHE;
output  [2:0] m_axi_y_ARPROT;
output  [3:0] m_axi_y_ARQOS;
output  [3:0] m_axi_y_ARREGION;
output  [C_M_AXI_Y_ARUSER_WIDTH - 1:0] m_axi_y_ARUSER;
input   m_axi_y_RVALID;
output   m_axi_y_RREADY;
input  [C_M_AXI_Y_DATA_WIDTH - 1:0] m_axi_y_RDATA;
input   m_axi_y_RLAST;
input  [C_M_AXI_Y_ID_WIDTH - 1:0] m_axi_y_RID;
input  [C_M_AXI_Y_RUSER_WIDTH - 1:0] m_axi_y_RUSER;
input  [1:0] m_axi_y_RRESP;
input   m_axi_y_BVALID;
output   m_axi_y_BREADY;
input  [1:0] m_axi_y_BRESP;
input  [C_M_AXI_Y_ID_WIDTH - 1:0] m_axi_y_BID;
input  [C_M_AXI_Y_BUSER_WIDTH - 1:0] m_axi_y_BUSER;
output   m_axi_b_AWVALID;
input   m_axi_b_AWREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_AWADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_AWID;
output  [7:0] m_axi_b_AWLEN;
output  [2:0] m_axi_b_AWSIZE;
output  [1:0] m_axi_b_AWBURST;
output  [1:0] m_axi_b_AWLOCK;
output  [3:0] m_axi_b_AWCACHE;
output  [2:0] m_axi_b_AWPROT;
output  [3:0] m_axi_b_AWQOS;
output  [3:0] m_axi_b_AWREGION;
output  [C_M_AXI_B_AWUSER_WIDTH - 1:0] m_axi_b_AWUSER;
output   m_axi_b_WVALID;
input   m_axi_b_WREADY;
output  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_WDATA;
output  [C_M_AXI_B_WSTRB_WIDTH - 1:0] m_axi_b_WSTRB;
output   m_axi_b_WLAST;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_WID;
output  [C_M_AXI_B_WUSER_WIDTH - 1:0] m_axi_b_WUSER;
output   m_axi_b_ARVALID;
input   m_axi_b_ARREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_ARADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_ARID;
output  [7:0] m_axi_b_ARLEN;
output  [2:0] m_axi_b_ARSIZE;
output  [1:0] m_axi_b_ARBURST;
output  [1:0] m_axi_b_ARLOCK;
output  [3:0] m_axi_b_ARCACHE;
output  [2:0] m_axi_b_ARPROT;
output  [3:0] m_axi_b_ARQOS;
output  [3:0] m_axi_b_ARREGION;
output  [C_M_AXI_B_ARUSER_WIDTH - 1:0] m_axi_b_ARUSER;
input   m_axi_b_RVALID;
output   m_axi_b_RREADY;
input  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_RDATA;
input   m_axi_b_RLAST;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_RID;
input  [C_M_AXI_B_RUSER_WIDTH - 1:0] m_axi_b_RUSER;
input  [1:0] m_axi_b_RRESP;
input   m_axi_b_BVALID;
output   m_axi_b_BREADY;
input  [1:0] m_axi_b_BRESP;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_BID;
input  [C_M_AXI_B_BUSER_WIDTH - 1:0] m_axi_b_BUSER;
output   m_axi_dx_AWVALID;
input   m_axi_dx_AWREADY;
output  [C_M_AXI_DX_ADDR_WIDTH - 1:0] m_axi_dx_AWADDR;
output  [C_M_AXI_DX_ID_WIDTH - 1:0] m_axi_dx_AWID;
output  [7:0] m_axi_dx_AWLEN;
output  [2:0] m_axi_dx_AWSIZE;
output  [1:0] m_axi_dx_AWBURST;
output  [1:0] m_axi_dx_AWLOCK;
output  [3:0] m_axi_dx_AWCACHE;
output  [2:0] m_axi_dx_AWPROT;
output  [3:0] m_axi_dx_AWQOS;
output  [3:0] m_axi_dx_AWREGION;
output  [C_M_AXI_DX_AWUSER_WIDTH - 1:0] m_axi_dx_AWUSER;
output   m_axi_dx_WVALID;
input   m_axi_dx_WREADY;
output  [C_M_AXI_DX_DATA_WIDTH - 1:0] m_axi_dx_WDATA;
output  [C_M_AXI_DX_WSTRB_WIDTH - 1:0] m_axi_dx_WSTRB;
output   m_axi_dx_WLAST;
output  [C_M_AXI_DX_ID_WIDTH - 1:0] m_axi_dx_WID;
output  [C_M_AXI_DX_WUSER_WIDTH - 1:0] m_axi_dx_WUSER;
output   m_axi_dx_ARVALID;
input   m_axi_dx_ARREADY;
output  [C_M_AXI_DX_ADDR_WIDTH - 1:0] m_axi_dx_ARADDR;
output  [C_M_AXI_DX_ID_WIDTH - 1:0] m_axi_dx_ARID;
output  [7:0] m_axi_dx_ARLEN;
output  [2:0] m_axi_dx_ARSIZE;
output  [1:0] m_axi_dx_ARBURST;
output  [1:0] m_axi_dx_ARLOCK;
output  [3:0] m_axi_dx_ARCACHE;
output  [2:0] m_axi_dx_ARPROT;
output  [3:0] m_axi_dx_ARQOS;
output  [3:0] m_axi_dx_ARREGION;
output  [C_M_AXI_DX_ARUSER_WIDTH - 1:0] m_axi_dx_ARUSER;
input   m_axi_dx_RVALID;
output   m_axi_dx_RREADY;
input  [C_M_AXI_DX_DATA_WIDTH - 1:0] m_axi_dx_RDATA;
input   m_axi_dx_RLAST;
input  [C_M_AXI_DX_ID_WIDTH - 1:0] m_axi_dx_RID;
input  [C_M_AXI_DX_RUSER_WIDTH - 1:0] m_axi_dx_RUSER;
input  [1:0] m_axi_dx_RRESP;
input   m_axi_dx_BVALID;
output   m_axi_dx_BREADY;
input  [1:0] m_axi_dx_BRESP;
input  [C_M_AXI_DX_ID_WIDTH - 1:0] m_axi_dx_BID;
input  [C_M_AXI_DX_BUSER_WIDTH - 1:0] m_axi_dx_BUSER;
output   m_axi_dy_AWVALID;
input   m_axi_dy_AWREADY;
output  [C_M_AXI_DY_ADDR_WIDTH - 1:0] m_axi_dy_AWADDR;
output  [C_M_AXI_DY_ID_WIDTH - 1:0] m_axi_dy_AWID;
output  [7:0] m_axi_dy_AWLEN;
output  [2:0] m_axi_dy_AWSIZE;
output  [1:0] m_axi_dy_AWBURST;
output  [1:0] m_axi_dy_AWLOCK;
output  [3:0] m_axi_dy_AWCACHE;
output  [2:0] m_axi_dy_AWPROT;
output  [3:0] m_axi_dy_AWQOS;
output  [3:0] m_axi_dy_AWREGION;
output  [C_M_AXI_DY_AWUSER_WIDTH - 1:0] m_axi_dy_AWUSER;
output   m_axi_dy_WVALID;
input   m_axi_dy_WREADY;
output  [C_M_AXI_DY_DATA_WIDTH - 1:0] m_axi_dy_WDATA;
output  [C_M_AXI_DY_WSTRB_WIDTH - 1:0] m_axi_dy_WSTRB;
output   m_axi_dy_WLAST;
output  [C_M_AXI_DY_ID_WIDTH - 1:0] m_axi_dy_WID;
output  [C_M_AXI_DY_WUSER_WIDTH - 1:0] m_axi_dy_WUSER;
output   m_axi_dy_ARVALID;
input   m_axi_dy_ARREADY;
output  [C_M_AXI_DY_ADDR_WIDTH - 1:0] m_axi_dy_ARADDR;
output  [C_M_AXI_DY_ID_WIDTH - 1:0] m_axi_dy_ARID;
output  [7:0] m_axi_dy_ARLEN;
output  [2:0] m_axi_dy_ARSIZE;
output  [1:0] m_axi_dy_ARBURST;
output  [1:0] m_axi_dy_ARLOCK;
output  [3:0] m_axi_dy_ARCACHE;
output  [2:0] m_axi_dy_ARPROT;
output  [3:0] m_axi_dy_ARQOS;
output  [3:0] m_axi_dy_ARREGION;
output  [C_M_AXI_DY_ARUSER_WIDTH - 1:0] m_axi_dy_ARUSER;
input   m_axi_dy_RVALID;
output   m_axi_dy_RREADY;
input  [C_M_AXI_DY_DATA_WIDTH - 1:0] m_axi_dy_RDATA;
input   m_axi_dy_RLAST;
input  [C_M_AXI_DY_ID_WIDTH - 1:0] m_axi_dy_RID;
input  [C_M_AXI_DY_RUSER_WIDTH - 1:0] m_axi_dy_RUSER;
input  [1:0] m_axi_dy_RRESP;
input   m_axi_dy_BVALID;
output   m_axi_dy_BREADY;
input  [1:0] m_axi_dy_BRESP;
input  [C_M_AXI_DY_ID_WIDTH - 1:0] m_axi_dy_BID;
input  [C_M_AXI_DY_BUSER_WIDTH - 1:0] m_axi_dy_BUSER;
output   m_axi_db_AWVALID;
input   m_axi_db_AWREADY;
output  [C_M_AXI_DB_ADDR_WIDTH - 1:0] m_axi_db_AWADDR;
output  [C_M_AXI_DB_ID_WIDTH - 1:0] m_axi_db_AWID;
output  [7:0] m_axi_db_AWLEN;
output  [2:0] m_axi_db_AWSIZE;
output  [1:0] m_axi_db_AWBURST;
output  [1:0] m_axi_db_AWLOCK;
output  [3:0] m_axi_db_AWCACHE;
output  [2:0] m_axi_db_AWPROT;
output  [3:0] m_axi_db_AWQOS;
output  [3:0] m_axi_db_AWREGION;
output  [C_M_AXI_DB_AWUSER_WIDTH - 1:0] m_axi_db_AWUSER;
output   m_axi_db_WVALID;
input   m_axi_db_WREADY;
output  [C_M_AXI_DB_DATA_WIDTH - 1:0] m_axi_db_WDATA;
output  [C_M_AXI_DB_WSTRB_WIDTH - 1:0] m_axi_db_WSTRB;
output   m_axi_db_WLAST;
output  [C_M_AXI_DB_ID_WIDTH - 1:0] m_axi_db_WID;
output  [C_M_AXI_DB_WUSER_WIDTH - 1:0] m_axi_db_WUSER;
output   m_axi_db_ARVALID;
input   m_axi_db_ARREADY;
output  [C_M_AXI_DB_ADDR_WIDTH - 1:0] m_axi_db_ARADDR;
output  [C_M_AXI_DB_ID_WIDTH - 1:0] m_axi_db_ARID;
output  [7:0] m_axi_db_ARLEN;
output  [2:0] m_axi_db_ARSIZE;
output  [1:0] m_axi_db_ARBURST;
output  [1:0] m_axi_db_ARLOCK;
output  [3:0] m_axi_db_ARCACHE;
output  [2:0] m_axi_db_ARPROT;
output  [3:0] m_axi_db_ARQOS;
output  [3:0] m_axi_db_ARREGION;
output  [C_M_AXI_DB_ARUSER_WIDTH - 1:0] m_axi_db_ARUSER;
input   m_axi_db_RVALID;
output   m_axi_db_RREADY;
input  [C_M_AXI_DB_DATA_WIDTH - 1:0] m_axi_db_RDATA;
input   m_axi_db_RLAST;
input  [C_M_AXI_DB_ID_WIDTH - 1:0] m_axi_db_RID;
input  [C_M_AXI_DB_RUSER_WIDTH - 1:0] m_axi_db_RUSER;
input  [1:0] m_axi_db_RRESP;
input   m_axi_db_BVALID;
output   m_axi_db_BREADY;
input  [1:0] m_axi_db_BRESP;
input  [C_M_AXI_DB_ID_WIDTH - 1:0] m_axi_db_BID;
input  [C_M_AXI_DB_BUSER_WIDTH - 1:0] m_axi_db_BUSER;
output   m_axi_dw_AWVALID;
input   m_axi_dw_AWREADY;
output  [C_M_AXI_DW_ADDR_WIDTH - 1:0] m_axi_dw_AWADDR;
output  [C_M_AXI_DW_ID_WIDTH - 1:0] m_axi_dw_AWID;
output  [7:0] m_axi_dw_AWLEN;
output  [2:0] m_axi_dw_AWSIZE;
output  [1:0] m_axi_dw_AWBURST;
output  [1:0] m_axi_dw_AWLOCK;
output  [3:0] m_axi_dw_AWCACHE;
output  [2:0] m_axi_dw_AWPROT;
output  [3:0] m_axi_dw_AWQOS;
output  [3:0] m_axi_dw_AWREGION;
output  [C_M_AXI_DW_AWUSER_WIDTH - 1:0] m_axi_dw_AWUSER;
output   m_axi_dw_WVALID;
input   m_axi_dw_WREADY;
output  [C_M_AXI_DW_DATA_WIDTH - 1:0] m_axi_dw_WDATA;
output  [C_M_AXI_DW_WSTRB_WIDTH - 1:0] m_axi_dw_WSTRB;
output   m_axi_dw_WLAST;
output  [C_M_AXI_DW_ID_WIDTH - 1:0] m_axi_dw_WID;
output  [C_M_AXI_DW_WUSER_WIDTH - 1:0] m_axi_dw_WUSER;
output   m_axi_dw_ARVALID;
input   m_axi_dw_ARREADY;
output  [C_M_AXI_DW_ADDR_WIDTH - 1:0] m_axi_dw_ARADDR;
output  [C_M_AXI_DW_ID_WIDTH - 1:0] m_axi_dw_ARID;
output  [7:0] m_axi_dw_ARLEN;
output  [2:0] m_axi_dw_ARSIZE;
output  [1:0] m_axi_dw_ARBURST;
output  [1:0] m_axi_dw_ARLOCK;
output  [3:0] m_axi_dw_ARCACHE;
output  [2:0] m_axi_dw_ARPROT;
output  [3:0] m_axi_dw_ARQOS;
output  [3:0] m_axi_dw_ARREGION;
output  [C_M_AXI_DW_ARUSER_WIDTH - 1:0] m_axi_dw_ARUSER;
input   m_axi_dw_RVALID;
output   m_axi_dw_RREADY;
input  [C_M_AXI_DW_DATA_WIDTH - 1:0] m_axi_dw_RDATA;
input   m_axi_dw_RLAST;
input  [C_M_AXI_DW_ID_WIDTH - 1:0] m_axi_dw_RID;
input  [C_M_AXI_DW_RUSER_WIDTH - 1:0] m_axi_dw_RUSER;
input  [1:0] m_axi_dw_RRESP;
input   m_axi_dw_BVALID;
output   m_axi_dw_BREADY;
input  [1:0] m_axi_dw_BRESP;
input  [C_M_AXI_DW_ID_WIDTH - 1:0] m_axi_dw_BID;
input  [C_M_AXI_DW_BUSER_WIDTH - 1:0] m_axi_dw_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] xdim;
wire   [31:0] ydim;
reg    x_blk_n_AR;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln22_fu_333_p2;
reg    x_blk_n_R;
wire    ap_CS_fsm_state42;
reg    w_blk_n_AR;
wire    ap_CS_fsm_state10;
reg    w_blk_n_R;
wire    ap_CS_fsm_state17;
reg    dx_blk_n_AW;
wire    ap_CS_fsm_state21;
reg    dx_blk_n_W;
wire    ap_CS_fsm_state22;
reg    dx_blk_n_B;
wire    ap_CS_fsm_state27;
reg    dy_blk_n_AR;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln15_fu_268_p2;
reg    dy_blk_n_R;
wire    ap_CS_fsm_state35;
wire   [0:0] icmp_ln23_fu_369_p2;
wire    ap_CS_fsm_state58;
wire   [0:0] icmp_ln29_fu_384_p2;
reg    db_blk_n_AW;
wire    ap_CS_fsm_state57;
reg    db_blk_n_W;
wire    ap_CS_fsm_state59;
reg    db_blk_n_B;
wire    ap_CS_fsm_state63;
reg    dw_blk_n_AW;
wire    ap_CS_fsm_state34;
reg    dw_blk_n_W;
wire    ap_CS_fsm_state47;
reg    dw_blk_n_B;
wire    ap_CS_fsm_state51;
wire    x_AWREADY;
wire    x_WREADY;
reg    x_ARVALID;
wire    x_ARREADY;
wire    x_RVALID;
reg    x_RREADY;
wire   [31:0] x_RDATA;
wire    x_RLAST;
wire   [0:0] x_RID;
wire   [0:0] x_RUSER;
wire   [1:0] x_RRESP;
wire    x_BVALID;
wire   [1:0] x_BRESP;
wire   [0:0] x_BID;
wire   [0:0] x_BUSER;
wire    w_AWREADY;
wire    w_WREADY;
reg    w_ARVALID;
wire    w_ARREADY;
wire   [31:0] w_ARADDR;
wire    w_RVALID;
reg    w_RREADY;
wire   [31:0] w_RDATA;
wire    w_RLAST;
wire   [0:0] w_RID;
wire   [0:0] w_RUSER;
wire   [1:0] w_RRESP;
wire    w_BVALID;
wire   [1:0] w_BRESP;
wire   [0:0] w_BID;
wire   [0:0] w_BUSER;
reg    dx_AWVALID;
wire    dx_AWREADY;
reg    dx_WVALID;
wire    dx_WREADY;
wire    dx_ARREADY;
wire    dx_RVALID;
wire   [31:0] dx_RDATA;
wire    dx_RLAST;
wire   [0:0] dx_RID;
wire   [0:0] dx_RUSER;
wire   [1:0] dx_RRESP;
wire    dx_BVALID;
reg    dx_BREADY;
wire   [1:0] dx_BRESP;
wire   [0:0] dx_BID;
wire   [0:0] dx_BUSER;
wire    dy_AWREADY;
wire    dy_WREADY;
reg    dy_ARVALID;
wire    dy_ARREADY;
reg   [31:0] dy_ARADDR;
reg   [31:0] dy_ARLEN;
wire    dy_RVALID;
reg    dy_RREADY;
wire   [31:0] dy_RDATA;
wire    dy_RLAST;
wire   [0:0] dy_RID;
wire   [0:0] dy_RUSER;
wire   [1:0] dy_RRESP;
wire    dy_BVALID;
wire   [1:0] dy_BRESP;
wire   [0:0] dy_BID;
wire   [0:0] dy_BUSER;
reg    db_AWVALID;
wire    db_AWREADY;
reg    db_WVALID;
wire    db_WREADY;
wire    db_ARREADY;
wire    db_RVALID;
wire   [31:0] db_RDATA;
wire    db_RLAST;
wire   [0:0] db_RID;
wire   [0:0] db_RUSER;
wire   [1:0] db_RRESP;
wire    db_BVALID;
reg    db_BREADY;
wire   [1:0] db_BRESP;
wire   [0:0] db_BID;
wire   [0:0] db_BUSER;
reg    dw_AWVALID;
wire    dw_AWREADY;
wire   [31:0] dw_AWADDR;
reg    dw_WVALID;
wire    dw_WREADY;
wire    dw_ARREADY;
wire    dw_RVALID;
wire   [31:0] dw_RDATA;
wire    dw_RLAST;
wire   [0:0] dw_RID;
wire   [0:0] dw_RUSER;
wire   [1:0] dw_RRESP;
wire    dw_BVALID;
reg    dw_BREADY;
wire   [1:0] dw_BRESP;
wire   [0:0] dw_BID;
wire   [0:0] dw_BUSER;
reg   [31:0] reg_252;
reg    ap_block_state17;
reg    ap_block_state58;
wire   [31:0] grp_fu_248_p2;
reg   [31:0] reg_258;
wire    ap_CS_fsm_state46;
reg   [31:0] ydim_read_reg_395;
reg   [31:0] xdim_read_reg_404;
wire   [31:0] zext_ln15_fu_264_p1;
reg   [31:0] zext_ln15_reg_414;
reg    ap_block_state2_io;
wire   [30:0] i_fu_273_p2;
reg   [30:0] i_reg_422;
reg   [31:0] dx_addr_reg_427;
wire    ap_CS_fsm_state8;
wire   [30:0] j_fu_298_p2;
reg   [30:0] j_reg_436;
wire    ap_CS_fsm_state9;
wire   [31:0] add_ln17_1_fu_304_p2;
reg   [31:0] add_ln17_1_reg_441;
wire   [0:0] icmp_ln16_fu_293_p2;
wire   [31:0] add_ln17_fu_309_p2;
reg   [31:0] add_ln17_reg_446;
reg   [31:0] w_addr_read_reg_457;
wire   [31:0] add_ln22_fu_324_p2;
reg   [31:0] add_ln22_reg_462;
reg    ap_block_state28_io;
wire   [30:0] i_1_fu_338_p2;
reg   [30:0] i_1_reg_470;
reg   [31:0] dy_addr_reg_475;
wire   [30:0] j_1_fu_374_p2;
reg   [30:0] j_1_reg_490;
reg    ap_block_state35_io;
reg   [31:0] dy_addr_read_reg_495;
reg    ap_block_state42;
reg   [31:0] x_read_reg_500;
wire   [30:0] i_2_fu_389_p2;
reg   [30:0] i_2_reg_508;
reg   [30:0] i_0_reg_168;
reg   [30:0] j_0_reg_180;
reg   [31:0] phi_mul_reg_191;
reg   [30:0] i1_0_reg_202;
reg  signed [31:0] phi_mul1_reg_214;
reg   [30:0] j2_0_reg_226;
reg   [30:0] i3_0_reg_237;
wire   [63:0] zext_ln17_fu_279_p1;
wire  signed [63:0] sext_ln17_fu_314_p1;
wire   [63:0] zext_ln24_fu_344_p1;
wire  signed [63:0] sext_ln24_fu_354_p1;
reg   [31:0] grp_fu_248_p0;
reg   [31:0] grp_fu_248_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state43;
wire   [31:0] zext_ln16_fu_289_p1;
wire   [31:0] zext_ln22_fu_329_p1;
wire   [31:0] zext_ln23_fu_365_p1;
wire   [31:0] zext_ln29_fu_380_p1;
reg    grp_fu_248_ce;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg   [62:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
end

backward_fcc_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
backward_fcc_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .xdim(xdim),
    .ydim(ydim)
);

backward_fcc_x_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_X_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_X_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_X_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_X_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_X_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_X_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_X_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_X_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_X_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_X_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_X_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_X_CACHE_VALUE ))
backward_fcc_x_m_axi_U(
    .AWVALID(m_axi_x_AWVALID),
    .AWREADY(m_axi_x_AWREADY),
    .AWADDR(m_axi_x_AWADDR),
    .AWID(m_axi_x_AWID),
    .AWLEN(m_axi_x_AWLEN),
    .AWSIZE(m_axi_x_AWSIZE),
    .AWBURST(m_axi_x_AWBURST),
    .AWLOCK(m_axi_x_AWLOCK),
    .AWCACHE(m_axi_x_AWCACHE),
    .AWPROT(m_axi_x_AWPROT),
    .AWQOS(m_axi_x_AWQOS),
    .AWREGION(m_axi_x_AWREGION),
    .AWUSER(m_axi_x_AWUSER),
    .WVALID(m_axi_x_WVALID),
    .WREADY(m_axi_x_WREADY),
    .WDATA(m_axi_x_WDATA),
    .WSTRB(m_axi_x_WSTRB),
    .WLAST(m_axi_x_WLAST),
    .WID(m_axi_x_WID),
    .WUSER(m_axi_x_WUSER),
    .ARVALID(m_axi_x_ARVALID),
    .ARREADY(m_axi_x_ARREADY),
    .ARADDR(m_axi_x_ARADDR),
    .ARID(m_axi_x_ARID),
    .ARLEN(m_axi_x_ARLEN),
    .ARSIZE(m_axi_x_ARSIZE),
    .ARBURST(m_axi_x_ARBURST),
    .ARLOCK(m_axi_x_ARLOCK),
    .ARCACHE(m_axi_x_ARCACHE),
    .ARPROT(m_axi_x_ARPROT),
    .ARQOS(m_axi_x_ARQOS),
    .ARREGION(m_axi_x_ARREGION),
    .ARUSER(m_axi_x_ARUSER),
    .RVALID(m_axi_x_RVALID),
    .RREADY(m_axi_x_RREADY),
    .RDATA(m_axi_x_RDATA),
    .RLAST(m_axi_x_RLAST),
    .RID(m_axi_x_RID),
    .RUSER(m_axi_x_RUSER),
    .RRESP(m_axi_x_RRESP),
    .BVALID(m_axi_x_BVALID),
    .BREADY(m_axi_x_BREADY),
    .BRESP(m_axi_x_BRESP),
    .BID(m_axi_x_BID),
    .BUSER(m_axi_x_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(x_ARVALID),
    .I_ARREADY(x_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(xdim_read_reg_404),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(x_RVALID),
    .I_RREADY(x_RREADY),
    .I_RDATA(x_RDATA),
    .I_RID(x_RID),
    .I_RUSER(x_RUSER),
    .I_RRESP(x_RRESP),
    .I_RLAST(x_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(x_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(x_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(x_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(x_BRESP),
    .I_BID(x_BID),
    .I_BUSER(x_BUSER)
);

backward_fcc_w_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_W_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_W_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_W_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_W_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_W_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_W_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_W_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_W_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_W_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_W_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_W_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_W_CACHE_VALUE ))
backward_fcc_w_m_axi_U(
    .AWVALID(m_axi_w_AWVALID),
    .AWREADY(m_axi_w_AWREADY),
    .AWADDR(m_axi_w_AWADDR),
    .AWID(m_axi_w_AWID),
    .AWLEN(m_axi_w_AWLEN),
    .AWSIZE(m_axi_w_AWSIZE),
    .AWBURST(m_axi_w_AWBURST),
    .AWLOCK(m_axi_w_AWLOCK),
    .AWCACHE(m_axi_w_AWCACHE),
    .AWPROT(m_axi_w_AWPROT),
    .AWQOS(m_axi_w_AWQOS),
    .AWREGION(m_axi_w_AWREGION),
    .AWUSER(m_axi_w_AWUSER),
    .WVALID(m_axi_w_WVALID),
    .WREADY(m_axi_w_WREADY),
    .WDATA(m_axi_w_WDATA),
    .WSTRB(m_axi_w_WSTRB),
    .WLAST(m_axi_w_WLAST),
    .WID(m_axi_w_WID),
    .WUSER(m_axi_w_WUSER),
    .ARVALID(m_axi_w_ARVALID),
    .ARREADY(m_axi_w_ARREADY),
    .ARADDR(m_axi_w_ARADDR),
    .ARID(m_axi_w_ARID),
    .ARLEN(m_axi_w_ARLEN),
    .ARSIZE(m_axi_w_ARSIZE),
    .ARBURST(m_axi_w_ARBURST),
    .ARLOCK(m_axi_w_ARLOCK),
    .ARCACHE(m_axi_w_ARCACHE),
    .ARPROT(m_axi_w_ARPROT),
    .ARQOS(m_axi_w_ARQOS),
    .ARREGION(m_axi_w_ARREGION),
    .ARUSER(m_axi_w_ARUSER),
    .RVALID(m_axi_w_RVALID),
    .RREADY(m_axi_w_RREADY),
    .RDATA(m_axi_w_RDATA),
    .RLAST(m_axi_w_RLAST),
    .RID(m_axi_w_RID),
    .RUSER(m_axi_w_RUSER),
    .RRESP(m_axi_w_RRESP),
    .BVALID(m_axi_w_BVALID),
    .BREADY(m_axi_w_BREADY),
    .BRESP(m_axi_w_BRESP),
    .BID(m_axi_w_BID),
    .BUSER(m_axi_w_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(w_ARVALID),
    .I_ARREADY(w_ARREADY),
    .I_ARADDR(w_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(w_RVALID),
    .I_RREADY(w_RREADY),
    .I_RDATA(w_RDATA),
    .I_RID(w_RID),
    .I_RUSER(w_RUSER),
    .I_RRESP(w_RRESP),
    .I_RLAST(w_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(w_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(w_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(w_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(w_BRESP),
    .I_BID(w_BID),
    .I_BUSER(w_BUSER)
);

backward_fcc_dx_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DX_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DX_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DX_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DX_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DX_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DX_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DX_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DX_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DX_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DX_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DX_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DX_CACHE_VALUE ))
backward_fcc_dx_m_axi_U(
    .AWVALID(m_axi_dx_AWVALID),
    .AWREADY(m_axi_dx_AWREADY),
    .AWADDR(m_axi_dx_AWADDR),
    .AWID(m_axi_dx_AWID),
    .AWLEN(m_axi_dx_AWLEN),
    .AWSIZE(m_axi_dx_AWSIZE),
    .AWBURST(m_axi_dx_AWBURST),
    .AWLOCK(m_axi_dx_AWLOCK),
    .AWCACHE(m_axi_dx_AWCACHE),
    .AWPROT(m_axi_dx_AWPROT),
    .AWQOS(m_axi_dx_AWQOS),
    .AWREGION(m_axi_dx_AWREGION),
    .AWUSER(m_axi_dx_AWUSER),
    .WVALID(m_axi_dx_WVALID),
    .WREADY(m_axi_dx_WREADY),
    .WDATA(m_axi_dx_WDATA),
    .WSTRB(m_axi_dx_WSTRB),
    .WLAST(m_axi_dx_WLAST),
    .WID(m_axi_dx_WID),
    .WUSER(m_axi_dx_WUSER),
    .ARVALID(m_axi_dx_ARVALID),
    .ARREADY(m_axi_dx_ARREADY),
    .ARADDR(m_axi_dx_ARADDR),
    .ARID(m_axi_dx_ARID),
    .ARLEN(m_axi_dx_ARLEN),
    .ARSIZE(m_axi_dx_ARSIZE),
    .ARBURST(m_axi_dx_ARBURST),
    .ARLOCK(m_axi_dx_ARLOCK),
    .ARCACHE(m_axi_dx_ARCACHE),
    .ARPROT(m_axi_dx_ARPROT),
    .ARQOS(m_axi_dx_ARQOS),
    .ARREGION(m_axi_dx_ARREGION),
    .ARUSER(m_axi_dx_ARUSER),
    .RVALID(m_axi_dx_RVALID),
    .RREADY(m_axi_dx_RREADY),
    .RDATA(m_axi_dx_RDATA),
    .RLAST(m_axi_dx_RLAST),
    .RID(m_axi_dx_RID),
    .RUSER(m_axi_dx_RUSER),
    .RRESP(m_axi_dx_RRESP),
    .BVALID(m_axi_dx_BVALID),
    .BREADY(m_axi_dx_BREADY),
    .BRESP(m_axi_dx_BRESP),
    .BID(m_axi_dx_BID),
    .BUSER(m_axi_dx_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(dx_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(dx_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(dx_RDATA),
    .I_RID(dx_RID),
    .I_RUSER(dx_RUSER),
    .I_RRESP(dx_RRESP),
    .I_RLAST(dx_RLAST),
    .I_AWVALID(dx_AWVALID),
    .I_AWREADY(dx_AWREADY),
    .I_AWADDR(dx_addr_reg_427),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(dx_WVALID),
    .I_WREADY(dx_WREADY),
    .I_WDATA(reg_258),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(dx_BVALID),
    .I_BREADY(dx_BREADY),
    .I_BRESP(dx_BRESP),
    .I_BID(dx_BID),
    .I_BUSER(dx_BUSER)
);

backward_fcc_dy_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DY_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DY_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DY_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DY_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DY_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DY_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DY_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DY_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DY_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DY_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DY_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DY_CACHE_VALUE ))
backward_fcc_dy_m_axi_U(
    .AWVALID(m_axi_dy_AWVALID),
    .AWREADY(m_axi_dy_AWREADY),
    .AWADDR(m_axi_dy_AWADDR),
    .AWID(m_axi_dy_AWID),
    .AWLEN(m_axi_dy_AWLEN),
    .AWSIZE(m_axi_dy_AWSIZE),
    .AWBURST(m_axi_dy_AWBURST),
    .AWLOCK(m_axi_dy_AWLOCK),
    .AWCACHE(m_axi_dy_AWCACHE),
    .AWPROT(m_axi_dy_AWPROT),
    .AWQOS(m_axi_dy_AWQOS),
    .AWREGION(m_axi_dy_AWREGION),
    .AWUSER(m_axi_dy_AWUSER),
    .WVALID(m_axi_dy_WVALID),
    .WREADY(m_axi_dy_WREADY),
    .WDATA(m_axi_dy_WDATA),
    .WSTRB(m_axi_dy_WSTRB),
    .WLAST(m_axi_dy_WLAST),
    .WID(m_axi_dy_WID),
    .WUSER(m_axi_dy_WUSER),
    .ARVALID(m_axi_dy_ARVALID),
    .ARREADY(m_axi_dy_ARREADY),
    .ARADDR(m_axi_dy_ARADDR),
    .ARID(m_axi_dy_ARID),
    .ARLEN(m_axi_dy_ARLEN),
    .ARSIZE(m_axi_dy_ARSIZE),
    .ARBURST(m_axi_dy_ARBURST),
    .ARLOCK(m_axi_dy_ARLOCK),
    .ARCACHE(m_axi_dy_ARCACHE),
    .ARPROT(m_axi_dy_ARPROT),
    .ARQOS(m_axi_dy_ARQOS),
    .ARREGION(m_axi_dy_ARREGION),
    .ARUSER(m_axi_dy_ARUSER),
    .RVALID(m_axi_dy_RVALID),
    .RREADY(m_axi_dy_RREADY),
    .RDATA(m_axi_dy_RDATA),
    .RLAST(m_axi_dy_RLAST),
    .RID(m_axi_dy_RID),
    .RUSER(m_axi_dy_RUSER),
    .RRESP(m_axi_dy_RRESP),
    .BVALID(m_axi_dy_BVALID),
    .BREADY(m_axi_dy_BREADY),
    .BRESP(m_axi_dy_BRESP),
    .BID(m_axi_dy_BID),
    .BUSER(m_axi_dy_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(dy_ARVALID),
    .I_ARREADY(dy_ARREADY),
    .I_ARADDR(dy_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(dy_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(dy_RVALID),
    .I_RREADY(dy_RREADY),
    .I_RDATA(dy_RDATA),
    .I_RID(dy_RID),
    .I_RUSER(dy_RUSER),
    .I_RRESP(dy_RRESP),
    .I_RLAST(dy_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(dy_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(dy_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(dy_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(dy_BRESP),
    .I_BID(dy_BID),
    .I_BUSER(dy_BUSER)
);

backward_fcc_db_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DB_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DB_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DB_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DB_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DB_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DB_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DB_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DB_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DB_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DB_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DB_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DB_CACHE_VALUE ))
backward_fcc_db_m_axi_U(
    .AWVALID(m_axi_db_AWVALID),
    .AWREADY(m_axi_db_AWREADY),
    .AWADDR(m_axi_db_AWADDR),
    .AWID(m_axi_db_AWID),
    .AWLEN(m_axi_db_AWLEN),
    .AWSIZE(m_axi_db_AWSIZE),
    .AWBURST(m_axi_db_AWBURST),
    .AWLOCK(m_axi_db_AWLOCK),
    .AWCACHE(m_axi_db_AWCACHE),
    .AWPROT(m_axi_db_AWPROT),
    .AWQOS(m_axi_db_AWQOS),
    .AWREGION(m_axi_db_AWREGION),
    .AWUSER(m_axi_db_AWUSER),
    .WVALID(m_axi_db_WVALID),
    .WREADY(m_axi_db_WREADY),
    .WDATA(m_axi_db_WDATA),
    .WSTRB(m_axi_db_WSTRB),
    .WLAST(m_axi_db_WLAST),
    .WID(m_axi_db_WID),
    .WUSER(m_axi_db_WUSER),
    .ARVALID(m_axi_db_ARVALID),
    .ARREADY(m_axi_db_ARREADY),
    .ARADDR(m_axi_db_ARADDR),
    .ARID(m_axi_db_ARID),
    .ARLEN(m_axi_db_ARLEN),
    .ARSIZE(m_axi_db_ARSIZE),
    .ARBURST(m_axi_db_ARBURST),
    .ARLOCK(m_axi_db_ARLOCK),
    .ARCACHE(m_axi_db_ARCACHE),
    .ARPROT(m_axi_db_ARPROT),
    .ARQOS(m_axi_db_ARQOS),
    .ARREGION(m_axi_db_ARREGION),
    .ARUSER(m_axi_db_ARUSER),
    .RVALID(m_axi_db_RVALID),
    .RREADY(m_axi_db_RREADY),
    .RDATA(m_axi_db_RDATA),
    .RLAST(m_axi_db_RLAST),
    .RID(m_axi_db_RID),
    .RUSER(m_axi_db_RUSER),
    .RRESP(m_axi_db_RRESP),
    .BVALID(m_axi_db_BVALID),
    .BREADY(m_axi_db_BREADY),
    .BRESP(m_axi_db_BRESP),
    .BID(m_axi_db_BID),
    .BUSER(m_axi_db_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(db_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(db_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(db_RDATA),
    .I_RID(db_RID),
    .I_RUSER(db_RUSER),
    .I_RRESP(db_RRESP),
    .I_RLAST(db_RLAST),
    .I_AWVALID(db_AWVALID),
    .I_AWREADY(db_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(ydim_read_reg_395),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(db_WVALID),
    .I_WREADY(db_WREADY),
    .I_WDATA(reg_252),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(db_BVALID),
    .I_BREADY(db_BREADY),
    .I_BRESP(db_BRESP),
    .I_BID(db_BID),
    .I_BUSER(db_BUSER)
);

backward_fcc_dw_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DW_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DW_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DW_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DW_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DW_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DW_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DW_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DW_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DW_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DW_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DW_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DW_CACHE_VALUE ))
backward_fcc_dw_m_axi_U(
    .AWVALID(m_axi_dw_AWVALID),
    .AWREADY(m_axi_dw_AWREADY),
    .AWADDR(m_axi_dw_AWADDR),
    .AWID(m_axi_dw_AWID),
    .AWLEN(m_axi_dw_AWLEN),
    .AWSIZE(m_axi_dw_AWSIZE),
    .AWBURST(m_axi_dw_AWBURST),
    .AWLOCK(m_axi_dw_AWLOCK),
    .AWCACHE(m_axi_dw_AWCACHE),
    .AWPROT(m_axi_dw_AWPROT),
    .AWQOS(m_axi_dw_AWQOS),
    .AWREGION(m_axi_dw_AWREGION),
    .AWUSER(m_axi_dw_AWUSER),
    .WVALID(m_axi_dw_WVALID),
    .WREADY(m_axi_dw_WREADY),
    .WDATA(m_axi_dw_WDATA),
    .WSTRB(m_axi_dw_WSTRB),
    .WLAST(m_axi_dw_WLAST),
    .WID(m_axi_dw_WID),
    .WUSER(m_axi_dw_WUSER),
    .ARVALID(m_axi_dw_ARVALID),
    .ARREADY(m_axi_dw_ARREADY),
    .ARADDR(m_axi_dw_ARADDR),
    .ARID(m_axi_dw_ARID),
    .ARLEN(m_axi_dw_ARLEN),
    .ARSIZE(m_axi_dw_ARSIZE),
    .ARBURST(m_axi_dw_ARBURST),
    .ARLOCK(m_axi_dw_ARLOCK),
    .ARCACHE(m_axi_dw_ARCACHE),
    .ARPROT(m_axi_dw_ARPROT),
    .ARQOS(m_axi_dw_ARQOS),
    .ARREGION(m_axi_dw_ARREGION),
    .ARUSER(m_axi_dw_ARUSER),
    .RVALID(m_axi_dw_RVALID),
    .RREADY(m_axi_dw_RREADY),
    .RDATA(m_axi_dw_RDATA),
    .RLAST(m_axi_dw_RLAST),
    .RID(m_axi_dw_RID),
    .RUSER(m_axi_dw_RUSER),
    .RRESP(m_axi_dw_RRESP),
    .BVALID(m_axi_dw_BVALID),
    .BREADY(m_axi_dw_BREADY),
    .BRESP(m_axi_dw_BRESP),
    .BID(m_axi_dw_BID),
    .BUSER(m_axi_dw_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(dw_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(dw_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(dw_RDATA),
    .I_RID(dw_RID),
    .I_RUSER(dw_RUSER),
    .I_RRESP(dw_RRESP),
    .I_RLAST(dw_RLAST),
    .I_AWVALID(dw_AWVALID),
    .I_AWREADY(dw_AWREADY),
    .I_AWADDR(dw_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(xdim_read_reg_404),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(dw_WVALID),
    .I_WREADY(dw_WREADY),
    .I_WDATA(reg_258),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(dw_BVALID),
    .I_BREADY(dw_BREADY),
    .I_BRESP(dw_BRESP),
    .I_BID(dw_BID),
    .I_BUSER(dw_BUSER)
);

backward_fcc_fmulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
backward_fcc_fmulbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_248_p0),
    .din1(grp_fu_248_p1),
    .ce(grp_fu_248_ce),
    .dout(grp_fu_248_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        i1_0_reg_202 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state51) & (dw_BVALID == 1'b1))) begin
        i1_0_reg_202 <= i_1_reg_470;
    end
end

always @ (posedge ap_clk) begin
    if (((db_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        i3_0_reg_237 <= 31'd0;
    end else if (((db_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        i3_0_reg_237 <= i_2_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_reg_168 <= i_reg_422;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_168 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (dw_AWREADY == 1'b1))) begin
        j2_0_reg_226 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (dw_WREADY == 1'b1))) begin
        j2_0_reg_226 <= j_1_reg_490;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_180 <= 31'd0;
    end else if (((dx_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        j_0_reg_180 <= j_reg_436;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        phi_mul1_reg_214 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state51) & (dw_BVALID == 1'b1))) begin
        phi_mul1_reg_214 <= add_ln22_reg_462;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_191 <= 32'd0;
    end else if (((dx_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        phi_mul_reg_191 <= add_ln17_1_reg_441;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln17_1_reg_441 <= add_ln17_1_fu_304_p2;
        add_ln17_reg_446 <= add_ln17_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io))) begin
        add_ln22_reg_462 <= add_ln22_fu_324_p2;
        i_1_reg_470 <= i_1_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dx_addr_reg_427[30 : 0] <= zext_ln17_fu_279_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((dy_RVALID == 1'b0) | (x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
        dy_addr_read_reg_495 <= dy_RDATA;
        x_read_reg_500 <= x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (dw_AWREADY == 1'b1))) begin
        dy_addr_reg_475[30 : 0] <= zext_ln24_fu_344_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln29_fu_384_p2 == 1'd1) & (dy_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state58))) begin
        i_2_reg_508 <= i_2_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        i_reg_422 <= i_fu_273_p2;
        zext_ln15_reg_414[30 : 0] <= zext_ln15_fu_264_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_block_state35_io))) begin
        j_1_reg_490 <= j_1_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_436 <= j_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((icmp_ln29_fu_384_p2 == 1'd1) & (dy_RVALID == 1'b0)) & (icmp_ln29_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)) | (~((dy_RVALID == 1'b0) | (w_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state17)))) begin
        reg_252 <= dy_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((dx_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        reg_258 <= grp_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((dy_RVALID == 1'b0) | (w_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        w_addr_read_reg_457 <= w_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        xdim_read_reg_404 <= xdim;
        ydim_read_reg_395 <= ydim;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) & (db_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) & (db_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((db_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        db_AWVALID = 1'b1;
    end else begin
        db_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) & (db_BVALID == 1'b1))) begin
        db_BREADY = 1'b1;
    end else begin
        db_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((db_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        db_WVALID = 1'b1;
    end else begin
        db_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        db_blk_n_AW = m_axi_db_AWREADY;
    end else begin
        db_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        db_blk_n_B = m_axi_db_BVALID;
    end else begin
        db_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        db_blk_n_W = m_axi_db_WREADY;
    end else begin
        db_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (dw_AWREADY == 1'b1))) begin
        dw_AWVALID = 1'b1;
    end else begin
        dw_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (dw_BVALID == 1'b1))) begin
        dw_BREADY = 1'b1;
    end else begin
        dw_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) & (dw_WREADY == 1'b1))) begin
        dw_WVALID = 1'b1;
    end else begin
        dw_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        dw_blk_n_AW = m_axi_dw_AWREADY;
    end else begin
        dw_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        dw_blk_n_B = m_axi_dw_BVALID;
    end else begin
        dw_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        dw_blk_n_W = m_axi_dw_WREADY;
    end else begin
        dw_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((dx_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        dx_AWVALID = 1'b1;
    end else begin
        dx_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((dx_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        dx_BREADY = 1'b1;
    end else begin
        dx_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((dx_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        dx_WVALID = 1'b1;
    end else begin
        dx_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        dx_blk_n_AW = m_axi_dx_AWREADY;
    end else begin
        dx_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        dx_blk_n_B = m_axi_dx_BVALID;
    end else begin
        dx_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        dx_blk_n_W = m_axi_dx_WREADY;
    end else begin
        dx_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_block_state35_io))) begin
        dy_ARADDR = dy_addr_reg_475;
    end else if ((((icmp_ln15_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)) | ((icmp_ln22_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io)))) begin
        dy_ARADDR = 32'd0;
    end else begin
        dy_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_block_state35_io))) begin
        dy_ARLEN = 32'd1;
    end else if ((((icmp_ln15_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)) | ((icmp_ln22_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io)))) begin
        dy_ARLEN = ydim_read_reg_395;
    end else begin
        dy_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln23_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_block_state35_io)) | ((icmp_ln15_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)) | ((icmp_ln22_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io)))) begin
        dy_ARVALID = 1'b1;
    end else begin
        dy_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln29_fu_384_p2 == 1'd1) & (dy_RVALID == 1'b0)) & (icmp_ln29_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)) | (~((dy_RVALID == 1'b0) | (w_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((dy_RVALID == 1'b0) | (x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state42)))) begin
        dy_RREADY = 1'b1;
    end else begin
        dy_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln23_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35)) | ((icmp_ln15_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln22_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28)))) begin
        dy_blk_n_AR = m_axi_dy_ARREADY;
    end else begin
        dy_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state42) | ((icmp_ln29_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58)))) begin
        dy_blk_n_R = m_axi_dy_RVALID;
    end else begin
        dy_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state46) | ((dx_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_248_ce = 1'b1;
    end else begin
        grp_fu_248_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_248_p0 = dy_addr_read_reg_495;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_248_p0 = reg_252;
    end else begin
        grp_fu_248_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_248_p1 = x_read_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_248_p1 = w_addr_read_reg_457;
    end else begin
        grp_fu_248_p1 = 'bx;
    end
end

always @ (*) begin
    if (((w_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        w_ARVALID = 1'b1;
    end else begin
        w_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((dy_RVALID == 1'b0) | (w_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        w_RREADY = 1'b1;
    end else begin
        w_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_blk_n_AR = m_axi_w_ARREADY;
    end else begin
        w_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        w_blk_n_R = m_axi_w_RVALID;
    end else begin
        w_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io))) begin
        x_ARVALID = 1'b1;
    end else begin
        x_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((dy_RVALID == 1'b0) | (x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
        x_RREADY = 1'b1;
    end else begin
        x_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        x_blk_n_AR = m_axi_x_ARREADY;
    end else begin
        x_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        x_blk_n_R = m_axi_x_RVALID;
    end else begin
        x_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln15_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else if (((icmp_ln15_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln16_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((w_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((~((dy_RVALID == 1'b0) | (w_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((dx_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((dx_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((dx_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln22_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else if (((icmp_ln22_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_block_state28_io))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (dw_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln23_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_block_state35_io))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if (((icmp_ln23_fu_369_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_block_state35_io))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if ((~((dy_RVALID == 1'b0) | (x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (dw_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (dw_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((db_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if ((~((icmp_ln29_fu_384_p2 == 1'd1) & (dy_RVALID == 1'b0)) & (icmp_ln29_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else if ((~((icmp_ln29_fu_384_p2 == 1'd1) & (dy_RVALID == 1'b0)) & (icmp_ln29_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((db_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (db_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_1_fu_304_p2 = (phi_mul_reg_191 + xdim_read_reg_404);

assign add_ln17_fu_309_p2 = (zext_ln15_reg_414 + phi_mul_reg_191);

assign add_ln22_fu_324_p2 = ($signed(phi_mul1_reg_214) + $signed(xdim_read_reg_404));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state17 = ((dy_RVALID == 1'b0) | (w_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state28_io = (((icmp_ln22_fu_333_p2 == 1'd0) & (dy_ARREADY == 1'b0)) | ((icmp_ln22_fu_333_p2 == 1'd1) & (x_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((icmp_ln15_fu_268_p2 == 1'd1) & (dy_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state35_io = ((icmp_ln23_fu_369_p2 == 1'd1) & (dy_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state42 = ((dy_RVALID == 1'b0) | (x_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state58 = ((icmp_ln29_fu_384_p2 == 1'd1) & (dy_RVALID == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dw_AWADDR = sext_ln24_fu_354_p1;

assign i_1_fu_338_p2 = (i1_0_reg_202 + 31'd1);

assign i_2_fu_389_p2 = (i3_0_reg_237 + 31'd1);

assign i_fu_273_p2 = (i_0_reg_168 + 31'd1);

assign icmp_ln15_fu_268_p2 = (($signed(zext_ln15_fu_264_p1) < $signed(xdim_read_reg_404)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_293_p2 = (($signed(zext_ln16_fu_289_p1) < $signed(ydim_read_reg_395)) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_333_p2 = (($signed(zext_ln22_fu_329_p1) < $signed(ydim_read_reg_395)) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_369_p2 = (($signed(zext_ln23_fu_365_p1) < $signed(xdim_read_reg_404)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_384_p2 = (($signed(zext_ln29_fu_380_p1) < $signed(ydim_read_reg_395)) ? 1'b1 : 1'b0);

assign j_1_fu_374_p2 = (j2_0_reg_226 + 31'd1);

assign j_fu_298_p2 = (j_0_reg_180 + 31'd1);

assign m_axi_b_ARADDR = 32'd0;

assign m_axi_b_ARBURST = 2'd0;

assign m_axi_b_ARCACHE = 4'd0;

assign m_axi_b_ARID = 1'd0;

assign m_axi_b_ARLEN = 8'd0;

assign m_axi_b_ARLOCK = 2'd0;

assign m_axi_b_ARPROT = 3'd0;

assign m_axi_b_ARQOS = 4'd0;

assign m_axi_b_ARREGION = 4'd0;

assign m_axi_b_ARSIZE = 3'd0;

assign m_axi_b_ARUSER = 1'd0;

assign m_axi_b_ARVALID = 1'b0;

assign m_axi_b_AWADDR = 32'd0;

assign m_axi_b_AWBURST = 2'd0;

assign m_axi_b_AWCACHE = 4'd0;

assign m_axi_b_AWID = 1'd0;

assign m_axi_b_AWLEN = 8'd0;

assign m_axi_b_AWLOCK = 2'd0;

assign m_axi_b_AWPROT = 3'd0;

assign m_axi_b_AWQOS = 4'd0;

assign m_axi_b_AWREGION = 4'd0;

assign m_axi_b_AWSIZE = 3'd0;

assign m_axi_b_AWUSER = 1'd0;

assign m_axi_b_AWVALID = 1'b0;

assign m_axi_b_BREADY = 1'b0;

assign m_axi_b_RREADY = 1'b0;

assign m_axi_b_WDATA = 32'd0;

assign m_axi_b_WID = 1'd0;

assign m_axi_b_WLAST = 1'b0;

assign m_axi_b_WSTRB = 4'd0;

assign m_axi_b_WUSER = 1'd0;

assign m_axi_b_WVALID = 1'b0;

assign m_axi_y_ARADDR = 32'd0;

assign m_axi_y_ARBURST = 2'd0;

assign m_axi_y_ARCACHE = 4'd0;

assign m_axi_y_ARID = 1'd0;

assign m_axi_y_ARLEN = 8'd0;

assign m_axi_y_ARLOCK = 2'd0;

assign m_axi_y_ARPROT = 3'd0;

assign m_axi_y_ARQOS = 4'd0;

assign m_axi_y_ARREGION = 4'd0;

assign m_axi_y_ARSIZE = 3'd0;

assign m_axi_y_ARUSER = 1'd0;

assign m_axi_y_ARVALID = 1'b0;

assign m_axi_y_AWADDR = 32'd0;

assign m_axi_y_AWBURST = 2'd0;

assign m_axi_y_AWCACHE = 4'd0;

assign m_axi_y_AWID = 1'd0;

assign m_axi_y_AWLEN = 8'd0;

assign m_axi_y_AWLOCK = 2'd0;

assign m_axi_y_AWPROT = 3'd0;

assign m_axi_y_AWQOS = 4'd0;

assign m_axi_y_AWREGION = 4'd0;

assign m_axi_y_AWSIZE = 3'd0;

assign m_axi_y_AWUSER = 1'd0;

assign m_axi_y_AWVALID = 1'b0;

assign m_axi_y_BREADY = 1'b0;

assign m_axi_y_RREADY = 1'b0;

assign m_axi_y_WDATA = 32'd0;

assign m_axi_y_WID = 1'd0;

assign m_axi_y_WLAST = 1'b0;

assign m_axi_y_WSTRB = 4'd0;

assign m_axi_y_WUSER = 1'd0;

assign m_axi_y_WVALID = 1'b0;

assign sext_ln17_fu_314_p1 = $signed(add_ln17_reg_446);

assign sext_ln24_fu_354_p1 = phi_mul1_reg_214;

assign w_ARADDR = sext_ln17_fu_314_p1;

assign zext_ln15_fu_264_p1 = i_0_reg_168;

assign zext_ln16_fu_289_p1 = j_0_reg_180;

assign zext_ln17_fu_279_p1 = i_0_reg_168;

assign zext_ln22_fu_329_p1 = i1_0_reg_202;

assign zext_ln23_fu_365_p1 = j2_0_reg_226;

assign zext_ln24_fu_344_p1 = i1_0_reg_202;

assign zext_ln29_fu_380_p1 = i3_0_reg_237;

always @ (posedge ap_clk) begin
    zext_ln15_reg_414[31] <= 1'b0;
    dx_addr_reg_427[31] <= 1'b0;
    dy_addr_reg_475[31] <= 1'b0;
end

endmodule //backward_fcc
