// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "forward_fcc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic forward_fcc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic forward_fcc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<41> forward_fcc::ap_ST_fsm_state1 = "1";
const sc_lv<41> forward_fcc::ap_ST_fsm_state2 = "10";
const sc_lv<41> forward_fcc::ap_ST_fsm_state3 = "100";
const sc_lv<41> forward_fcc::ap_ST_fsm_state4 = "1000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state5 = "10000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state6 = "100000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state7 = "1000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state8 = "10000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state9 = "100000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<41> forward_fcc::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<32> forward_fcc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> forward_fcc::ap_const_lv32_2 = "10";
const sc_lv<32> forward_fcc::ap_const_lv32_9 = "1001";
const sc_lv<32> forward_fcc::ap_const_lv32_A = "1010";
const sc_lv<32> forward_fcc::ap_const_lv32_F = "1111";
const sc_lv<32> forward_fcc::ap_const_lv32_18 = "11000";
const sc_lv<32> forward_fcc::ap_const_lv32_23 = "100011";
const sc_lv<32> forward_fcc::ap_const_lv32_28 = "101000";
const sc_lv<32> forward_fcc::ap_const_lv32_11 = "10001";
const sc_lv<32> forward_fcc::ap_const_lv32_12 = "10010";
const sc_lv<32> forward_fcc::ap_const_lv32_19 = "11001";
const int forward_fcc::C_S_AXI_DATA_WIDTH = "100000";
const int forward_fcc::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int forward_fcc::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int forward_fcc::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int forward_fcc::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> forward_fcc::ap_const_lv32_1 = "1";
const sc_lv<1> forward_fcc::ap_const_lv1_1 = "1";
const sc_lv<32> forward_fcc::ap_const_lv32_10 = "10000";
const sc_lv<32> forward_fcc::ap_const_lv32_1D = "11101";
const sc_lv<32> forward_fcc::ap_const_lv32_22 = "100010";
const sc_lv<31> forward_fcc::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> forward_fcc::ap_const_lv1_0 = "0";
const sc_lv<3> forward_fcc::ap_const_lv3_0 = "000";
const sc_lv<2> forward_fcc::ap_const_lv2_0 = "00";
const sc_lv<4> forward_fcc::ap_const_lv4_0 = "0000";
const sc_lv<4> forward_fcc::ap_const_lv4_F = "1111";
const sc_lv<32> forward_fcc::ap_const_lv32_1E = "11110";
const sc_lv<32> forward_fcc::ap_const_lv32_1A = "11010";
const sc_lv<32> forward_fcc::ap_const_lv32_1F = "11111";
const sc_lv<31> forward_fcc::ap_const_lv31_1 = "1";
const bool forward_fcc::ap_const_boolean_1 = true;

forward_fcc::forward_fcc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    forward_fcc_AXILiteS_s_axi_U = new forward_fcc_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("forward_fcc_AXILiteS_s_axi_U");
    forward_fcc_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    forward_fcc_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    forward_fcc_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    forward_fcc_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    forward_fcc_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    forward_fcc_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    forward_fcc_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    forward_fcc_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    forward_fcc_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    forward_fcc_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    forward_fcc_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    forward_fcc_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    forward_fcc_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    forward_fcc_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    forward_fcc_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    forward_fcc_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    forward_fcc_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    forward_fcc_AXILiteS_s_axi_U->ACLK(ap_clk);
    forward_fcc_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    forward_fcc_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    forward_fcc_AXILiteS_s_axi_U->x(x);
    forward_fcc_AXILiteS_s_axi_U->w(w);
    forward_fcc_AXILiteS_s_axi_U->y(y);
    forward_fcc_AXILiteS_s_axi_U->b(b);
    forward_fcc_AXILiteS_s_axi_U->xdim(xdim);
    forward_fcc_AXILiteS_s_axi_U->ydim(ydim);
    forward_fcc_gmem_m_axi_U = new forward_fcc_gmem_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("forward_fcc_gmem_m_axi_U");
    forward_fcc_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    forward_fcc_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    forward_fcc_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    forward_fcc_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    forward_fcc_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    forward_fcc_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    forward_fcc_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    forward_fcc_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    forward_fcc_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    forward_fcc_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    forward_fcc_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    forward_fcc_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    forward_fcc_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    forward_fcc_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    forward_fcc_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    forward_fcc_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    forward_fcc_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    forward_fcc_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    forward_fcc_gmem_m_axi_U->WID(m_axi_gmem_WID);
    forward_fcc_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    forward_fcc_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    forward_fcc_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    forward_fcc_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    forward_fcc_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    forward_fcc_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    forward_fcc_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    forward_fcc_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    forward_fcc_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    forward_fcc_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    forward_fcc_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    forward_fcc_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    forward_fcc_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    forward_fcc_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    forward_fcc_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    forward_fcc_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    forward_fcc_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    forward_fcc_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    forward_fcc_gmem_m_axi_U->RID(m_axi_gmem_RID);
    forward_fcc_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    forward_fcc_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    forward_fcc_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    forward_fcc_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    forward_fcc_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    forward_fcc_gmem_m_axi_U->BID(m_axi_gmem_BID);
    forward_fcc_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    forward_fcc_gmem_m_axi_U->ACLK(ap_clk);
    forward_fcc_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    forward_fcc_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    forward_fcc_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    forward_fcc_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    forward_fcc_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    forward_fcc_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    forward_fcc_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    forward_fcc_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    forward_fcc_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    forward_fcc_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    forward_fcc_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    forward_fcc_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    forward_fcc_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    forward_fcc_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    forward_fcc_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    forward_fcc_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    forward_fcc_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    forward_fcc_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    forward_fcc_gmem_m_axi_U->I_RID(gmem_RID);
    forward_fcc_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    forward_fcc_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    forward_fcc_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    forward_fcc_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    forward_fcc_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    forward_fcc_gmem_m_axi_U->I_AWADDR(gmem_AWADDR);
    forward_fcc_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    forward_fcc_gmem_m_axi_U->I_AWLEN(ap_var_for_const2);
    forward_fcc_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    forward_fcc_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    forward_fcc_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    forward_fcc_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    forward_fcc_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    forward_fcc_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    forward_fcc_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    forward_fcc_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    forward_fcc_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    forward_fcc_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    forward_fcc_gmem_m_axi_U->I_WDATA(gmem_WDATA);
    forward_fcc_gmem_m_axi_U->I_WID(ap_var_for_const1);
    forward_fcc_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    forward_fcc_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    forward_fcc_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    forward_fcc_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    forward_fcc_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    forward_fcc_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    forward_fcc_gmem_m_axi_U->I_BID(gmem_BID);
    forward_fcc_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    forward_fcc_fadd_bkb_U1 = new forward_fcc_fadd_bkb<1,5,32,32,32>("forward_fcc_fadd_bkb_U1");
    forward_fcc_fadd_bkb_U1->clk(ap_clk);
    forward_fcc_fadd_bkb_U1->reset(ap_rst_n_inv);
    forward_fcc_fadd_bkb_U1->din0(empty_reg_197);
    forward_fcc_fadd_bkb_U1->din1(tmp_reg_496);
    forward_fcc_fadd_bkb_U1->ce(ap_var_for_const0);
    forward_fcc_fadd_bkb_U1->dout(grp_fu_218_p2);
    forward_fcc_fmul_cud_U2 = new forward_fcc_fmul_cud<1,4,32,32,32>("forward_fcc_fmul_cud_U2");
    forward_fcc_fmul_cud_U2->clk(ap_clk);
    forward_fcc_fmul_cud_U2->reset(ap_rst_n_inv);
    forward_fcc_fmul_cud_U2->din0(gmem_addr_2_read_reg_486);
    forward_fcc_fmul_cud_U2->din1(gmem_addr_3_read_reg_491);
    forward_fcc_fmul_cud_U2->ce(ap_var_for_const0);
    forward_fcc_fmul_cud_U2->dout(grp_fu_223_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln11_fu_283_p2);
    sensitive << ( xdim_read_reg_393 );
    sensitive << ( phi_mul_reg_185 );

    SC_METHOD(thread_add_ln12_1_fu_308_p2);
    sensitive << ( p_cast11_reg_404 );
    sensitive << ( zext_ln11_fu_288_p1 );

    SC_METHOD(thread_add_ln12_fu_303_p2);
    sensitive << ( p_cast12_reg_399 );
    sensitive << ( zext_ln11_fu_288_p1 );

    SC_METHOD(thread_add_ln15_1_fu_358_p2);
    sensitive << ( p_cast10_reg_409 );
    sensitive << ( sext_ln15_fu_354_p1 );

    SC_METHOD(thread_add_ln15_2_fu_373_p2);
    sensitive << ( p_cast_reg_414 );
    sensitive << ( zext_ln14_fu_333_p1 );

    SC_METHOD(thread_add_ln15_fu_348_p2);
    sensitive << ( phi_mul_reg_185 );
    sensitive << ( zext_ln14_fu_333_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_292_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_292_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( gmem_ARREADY );
    sensitive << ( gmem_addr_2_reg_469 );
    sensitive << ( zext_ln12_fu_313_p1 );
    sensitive << ( zext_ln15_fu_378_p1 );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( gmem_ARREADY );

    SC_METHOD(thread_gmem_AWADDR);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_addr_1_reg_454 );
    sensitive << ( zext_ln12_1_fu_323_p1 );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_gmem_WDATA);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( gmem_addr_read_reg_448 );
    sensitive << ( tmp_1_reg_501 );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_i_fu_297_p2);
    sensitive << ( i_0_reg_174 );

    SC_METHOD(thread_icmp_ln11_fu_292_p2);
    sensitive << ( ydim_read_reg_388 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln11_fu_288_p1 );

    SC_METHOD(thread_icmp_ln14_fu_337_p2);
    sensitive << ( xdim_read_reg_393 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( zext_ln14_fu_333_p1 );

    SC_METHOD(thread_j_fu_342_p2);
    sensitive << ( j_0_reg_207 );

    SC_METHOD(thread_p_cast10_fu_265_p1);
    sensitive << ( tmp_4_fu_255_p4 );

    SC_METHOD(thread_p_cast11_fu_251_p1);
    sensitive << ( tmp_3_fu_241_p4 );

    SC_METHOD(thread_p_cast12_fu_237_p1);
    sensitive << ( tmp_2_fu_227_p4 );

    SC_METHOD(thread_p_cast_fu_279_p1);
    sensitive << ( tmp_5_fu_269_p4 );

    SC_METHOD(thread_sext_ln15_1_fu_363_p1);
    sensitive << ( add_ln15_1_fu_358_p2 );

    SC_METHOD(thread_sext_ln15_fu_354_p1);
    sensitive << ( add_ln15_fu_348_p2 );

    SC_METHOD(thread_tmp_2_fu_227_p4);
    sensitive << ( b );

    SC_METHOD(thread_tmp_3_fu_241_p4);
    sensitive << ( y );

    SC_METHOD(thread_tmp_4_fu_255_p4);
    sensitive << ( w );

    SC_METHOD(thread_tmp_5_fu_269_p4);
    sensitive << ( x );

    SC_METHOD(thread_zext_ln11_fu_288_p1);
    sensitive << ( i_0_reg_174 );

    SC_METHOD(thread_zext_ln12_1_fu_323_p1);
    sensitive << ( add_ln12_1_reg_437 );

    SC_METHOD(thread_zext_ln12_fu_313_p1);
    sensitive << ( add_ln12_reg_432 );

    SC_METHOD(thread_zext_ln14_fu_333_p1);
    sensitive << ( j_0_reg_207 );

    SC_METHOD(thread_zext_ln15_fu_378_p1);
    sensitive << ( add_ln15_2_reg_475 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( gmem_AWREADY );
    sensitive << ( gmem_WREADY );
    sensitive << ( gmem_ARREADY );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_292_p2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( icmp_ln14_fu_337_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "00000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "forward_fcc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, w, "w");
    sc_trace(mVcdFile, y, "y");
    sc_trace(mVcdFile, b, "b");
    sc_trace(mVcdFile, xdim, "xdim");
    sc_trace(mVcdFile, ydim, "ydim");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_AWADDR, "gmem_AWADDR");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_WDATA, "gmem_WDATA");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, ydim_read_reg_388, "ydim_read_reg_388");
    sc_trace(mVcdFile, xdim_read_reg_393, "xdim_read_reg_393");
    sc_trace(mVcdFile, p_cast12_fu_237_p1, "p_cast12_fu_237_p1");
    sc_trace(mVcdFile, p_cast12_reg_399, "p_cast12_reg_399");
    sc_trace(mVcdFile, p_cast11_fu_251_p1, "p_cast11_fu_251_p1");
    sc_trace(mVcdFile, p_cast11_reg_404, "p_cast11_reg_404");
    sc_trace(mVcdFile, p_cast10_fu_265_p1, "p_cast10_fu_265_p1");
    sc_trace(mVcdFile, p_cast10_reg_409, "p_cast10_reg_409");
    sc_trace(mVcdFile, p_cast_fu_279_p1, "p_cast_fu_279_p1");
    sc_trace(mVcdFile, p_cast_reg_414, "p_cast_reg_414");
    sc_trace(mVcdFile, add_ln11_fu_283_p2, "add_ln11_fu_283_p2");
    sc_trace(mVcdFile, add_ln11_reg_419, "add_ln11_reg_419");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_297_p2, "i_fu_297_p2");
    sc_trace(mVcdFile, i_reg_427, "i_reg_427");
    sc_trace(mVcdFile, add_ln12_fu_303_p2, "add_ln12_fu_303_p2");
    sc_trace(mVcdFile, add_ln12_reg_432, "add_ln12_reg_432");
    sc_trace(mVcdFile, icmp_ln11_fu_292_p2, "icmp_ln11_fu_292_p2");
    sc_trace(mVcdFile, add_ln12_1_fu_308_p2, "add_ln12_1_fu_308_p2");
    sc_trace(mVcdFile, add_ln12_1_reg_437, "add_ln12_1_reg_437");
    sc_trace(mVcdFile, gmem_addr_read_reg_448, "gmem_addr_read_reg_448");
    sc_trace(mVcdFile, gmem_addr_1_reg_454, "gmem_addr_1_reg_454");
    sc_trace(mVcdFile, j_fu_342_p2, "j_fu_342_p2");
    sc_trace(mVcdFile, j_reg_464, "j_reg_464");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, gmem_addr_2_reg_469, "gmem_addr_2_reg_469");
    sc_trace(mVcdFile, icmp_ln14_fu_337_p2, "icmp_ln14_fu_337_p2");
    sc_trace(mVcdFile, add_ln15_2_fu_373_p2, "add_ln15_2_fu_373_p2");
    sc_trace(mVcdFile, add_ln15_2_reg_475, "add_ln15_2_reg_475");
    sc_trace(mVcdFile, gmem_addr_2_read_reg_486, "gmem_addr_2_read_reg_486");
    sc_trace(mVcdFile, gmem_addr_3_read_reg_491, "gmem_addr_3_read_reg_491");
    sc_trace(mVcdFile, grp_fu_223_p2, "grp_fu_223_p2");
    sc_trace(mVcdFile, tmp_reg_496, "tmp_reg_496");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, grp_fu_218_p2, "grp_fu_218_p2");
    sc_trace(mVcdFile, tmp_1_reg_501, "tmp_1_reg_501");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, i_0_reg_174, "i_0_reg_174");
    sc_trace(mVcdFile, phi_mul_reg_185, "phi_mul_reg_185");
    sc_trace(mVcdFile, empty_reg_197, "empty_reg_197");
    sc_trace(mVcdFile, j_0_reg_207, "j_0_reg_207");
    sc_trace(mVcdFile, zext_ln12_fu_313_p1, "zext_ln12_fu_313_p1");
    sc_trace(mVcdFile, zext_ln12_1_fu_323_p1, "zext_ln12_1_fu_323_p1");
    sc_trace(mVcdFile, sext_ln15_1_fu_363_p1, "sext_ln15_1_fu_363_p1");
    sc_trace(mVcdFile, zext_ln15_fu_378_p1, "zext_ln15_fu_378_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, tmp_2_fu_227_p4, "tmp_2_fu_227_p4");
    sc_trace(mVcdFile, tmp_3_fu_241_p4, "tmp_3_fu_241_p4");
    sc_trace(mVcdFile, tmp_4_fu_255_p4, "tmp_4_fu_255_p4");
    sc_trace(mVcdFile, tmp_5_fu_269_p4, "tmp_5_fu_269_p4");
    sc_trace(mVcdFile, zext_ln11_fu_288_p1, "zext_ln11_fu_288_p1");
    sc_trace(mVcdFile, zext_ln14_fu_333_p1, "zext_ln14_fu_333_p1");
    sc_trace(mVcdFile, add_ln15_fu_348_p2, "add_ln15_fu_348_p2");
    sc_trace(mVcdFile, sext_ln15_fu_354_p1, "sext_ln15_fu_354_p1");
    sc_trace(mVcdFile, add_ln15_1_fu_358_p2, "add_ln15_1_fu_358_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("forward_fcc.hdltvin.dat");
    mHdltvoutHandle.open("forward_fcc.hdltvout.dat");
}

forward_fcc::~forward_fcc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete forward_fcc_AXILiteS_s_axi_U;
    delete forward_fcc_gmem_m_axi_U;
    delete forward_fcc_fadd_bkb_U1;
    delete forward_fcc_fmul_cud_U2;
}

void forward_fcc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void forward_fcc::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void forward_fcc::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void forward_fcc::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void forward_fcc::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void forward_fcc::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void forward_fcc::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void forward_fcc::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void forward_fcc::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
            empty_reg_197 = tmp_1_reg_501.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
            empty_reg_197 = gmem_addr_read_reg_448.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(icmp_ln14_fu_337_p2.read(), ap_const_lv1_0))) {
        i_0_reg_174 = i_reg_427.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_174 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
            j_0_reg_207 = j_reg_464.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
            j_0_reg_207 = ap_const_lv31_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(icmp_ln14_fu_337_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_185 = add_ln11_reg_419.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_185 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln11_reg_419 = add_ln11_fu_283_p2.read();
        i_reg_427 = i_fu_297_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_292_p2.read(), ap_const_lv1_1))) {
        add_ln12_1_reg_437 = add_ln12_1_fu_308_p2.read();
        add_ln12_reg_432 = add_ln12_fu_303_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_337_p2.read()))) {
        add_ln15_2_reg_475 = add_ln15_2_fu_373_p2.read();
        gmem_addr_2_reg_469 =  (sc_lv<32>) (sext_ln15_1_fu_363_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read())))) {
        gmem_addr_1_reg_454 =  (sc_lv<32>) (zext_ln12_1_fu_323_p1.read());
        gmem_addr_read_reg_448 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read())))) {
        gmem_addr_2_read_reg_486 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        gmem_addr_3_read_reg_491 = gmem_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        j_reg_464 = j_fu_342_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_cast10_reg_409 = p_cast10_fu_265_p1.read();
        p_cast11_reg_404 = p_cast11_fu_251_p1.read();
        p_cast12_reg_399 = p_cast12_fu_237_p1.read();
        p_cast_reg_414 = p_cast_fu_279_p1.read();
        xdim_read_reg_393 = xdim.read();
        ydim_read_reg_388 = ydim.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        tmp_1_reg_501 = grp_fu_218_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        tmp_reg_496 = grp_fu_223_p2.read();
    }
}

void forward_fcc::thread_add_ln11_fu_283_p2() {
    add_ln11_fu_283_p2 = (!phi_mul_reg_185.read().is_01() || !xdim_read_reg_393.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_185.read()) + sc_biguint<32>(xdim_read_reg_393.read()));
}

void forward_fcc::thread_add_ln12_1_fu_308_p2() {
    add_ln12_1_fu_308_p2 = (!zext_ln11_fu_288_p1.read().is_01() || !p_cast11_reg_404.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln11_fu_288_p1.read()) + sc_biguint<32>(p_cast11_reg_404.read()));
}

void forward_fcc::thread_add_ln12_fu_303_p2() {
    add_ln12_fu_303_p2 = (!zext_ln11_fu_288_p1.read().is_01() || !p_cast12_reg_399.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln11_fu_288_p1.read()) + sc_biguint<32>(p_cast12_reg_399.read()));
}

void forward_fcc::thread_add_ln15_1_fu_358_p2() {
    add_ln15_1_fu_358_p2 = (!sext_ln15_fu_354_p1.read().is_01() || !p_cast10_reg_409.read().is_01())? sc_lv<33>(): (sc_bigint<33>(sext_ln15_fu_354_p1.read()) + sc_biguint<33>(p_cast10_reg_409.read()));
}

void forward_fcc::thread_add_ln15_2_fu_373_p2() {
    add_ln15_2_fu_373_p2 = (!zext_ln14_fu_333_p1.read().is_01() || !p_cast_reg_414.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln14_fu_333_p1.read()) + sc_biguint<32>(p_cast_reg_414.read()));
}

void forward_fcc::thread_add_ln15_fu_348_p2() {
    add_ln15_fu_348_p2 = (!zext_ln14_fu_333_p1.read().is_01() || !phi_mul_reg_185.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln14_fu_333_p1.read()) + sc_biguint<32>(phi_mul_reg_185.read()));
}

void forward_fcc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void forward_fcc::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void forward_fcc::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void forward_fcc::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void forward_fcc::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void forward_fcc::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void forward_fcc::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void forward_fcc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void forward_fcc::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void forward_fcc::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void forward_fcc::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void forward_fcc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void forward_fcc::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void forward_fcc::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void forward_fcc::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void forward_fcc::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void forward_fcc::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void forward_fcc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_292_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void forward_fcc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void forward_fcc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_292_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void forward_fcc::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void forward_fcc::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            gmem_ARADDR =  (sc_lv<32>) (zext_ln15_fu_378_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            gmem_ARADDR = gmem_addr_2_reg_469.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            gmem_ARADDR =  (sc_lv<32>) (zext_ln12_fu_313_p1.read());
        } else {
            gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void forward_fcc::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1)))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void forward_fcc::thread_gmem_AWADDR() {
    if (!(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read()))) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
            gmem_AWADDR = gmem_addr_1_reg_454.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            gmem_AWADDR =  (sc_lv<32>) (zext_ln12_1_fu_323_p1.read());
        } else {
            gmem_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        gmem_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void forward_fcc::thread_gmem_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read()))))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void forward_fcc::thread_gmem_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
          esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1)))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void forward_fcc::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void forward_fcc::thread_gmem_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        gmem_WDATA = tmp_1_reg_501.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        gmem_WDATA = gmem_addr_read_reg_448.read();
    } else {
        gmem_WDATA = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void forward_fcc::thread_gmem_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(gmem_WREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
          esl_seteq<1,1,1>(gmem_WREADY.read(), ap_const_logic_1)))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void forward_fcc::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void forward_fcc::thread_gmem_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void forward_fcc::thread_gmem_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void forward_fcc::thread_gmem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void forward_fcc::thread_gmem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void forward_fcc::thread_i_fu_297_p2() {
    i_fu_297_p2 = (!i_0_reg_174.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_reg_174.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void forward_fcc::thread_icmp_ln11_fu_292_p2() {
    icmp_ln11_fu_292_p2 = (!zext_ln11_fu_288_p1.read().is_01() || !ydim_read_reg_388.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln11_fu_288_p1.read()) < sc_bigint<32>(ydim_read_reg_388.read()));
}

void forward_fcc::thread_icmp_ln14_fu_337_p2() {
    icmp_ln14_fu_337_p2 = (!zext_ln14_fu_333_p1.read().is_01() || !xdim_read_reg_393.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln14_fu_333_p1.read()) < sc_bigint<32>(xdim_read_reg_393.read()));
}

void forward_fcc::thread_j_fu_342_p2() {
    j_fu_342_p2 = (!j_0_reg_207.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_0_reg_207.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void forward_fcc::thread_p_cast10_fu_265_p1() {
    p_cast10_fu_265_p1 = esl_zext<33,30>(tmp_4_fu_255_p4.read());
}

void forward_fcc::thread_p_cast11_fu_251_p1() {
    p_cast11_fu_251_p1 = esl_zext<32,30>(tmp_3_fu_241_p4.read());
}

void forward_fcc::thread_p_cast12_fu_237_p1() {
    p_cast12_fu_237_p1 = esl_zext<32,30>(tmp_2_fu_227_p4.read());
}

void forward_fcc::thread_p_cast_fu_279_p1() {
    p_cast_fu_279_p1 = esl_zext<32,30>(tmp_5_fu_269_p4.read());
}

void forward_fcc::thread_sext_ln15_1_fu_363_p1() {
    sext_ln15_1_fu_363_p1 = esl_sext<64,33>(add_ln15_1_fu_358_p2.read());
}

void forward_fcc::thread_sext_ln15_fu_354_p1() {
    sext_ln15_fu_354_p1 = esl_sext<33,32>(add_ln15_fu_348_p2.read());
}

void forward_fcc::thread_tmp_2_fu_227_p4() {
    tmp_2_fu_227_p4 = b.read().range(31, 2);
}

void forward_fcc::thread_tmp_3_fu_241_p4() {
    tmp_3_fu_241_p4 = y.read().range(31, 2);
}

void forward_fcc::thread_tmp_4_fu_255_p4() {
    tmp_4_fu_255_p4 = w.read().range(31, 2);
}

void forward_fcc::thread_tmp_5_fu_269_p4() {
    tmp_5_fu_269_p4 = x.read().range(31, 2);
}

void forward_fcc::thread_zext_ln11_fu_288_p1() {
    zext_ln11_fu_288_p1 = esl_zext<32,31>(i_0_reg_174.read());
}

void forward_fcc::thread_zext_ln12_1_fu_323_p1() {
    zext_ln12_1_fu_323_p1 = esl_zext<64,32>(add_ln12_1_reg_437.read());
}

void forward_fcc::thread_zext_ln12_fu_313_p1() {
    zext_ln12_fu_313_p1 = esl_zext<64,32>(add_ln12_reg_432.read());
}

void forward_fcc::thread_zext_ln14_fu_333_p1() {
    zext_ln14_fu_333_p1 = esl_zext<32,31>(j_0_reg_207.read());
}

void forward_fcc::thread_zext_ln15_fu_378_p1() {
    zext_ln15_fu_378_p1 = esl_zext<64,32>(add_ln15_2_reg_475.read());
}

void forward_fcc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_292_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(gmem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(icmp_ln14_fu_337_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gmem_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(gmem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state37;
            } else {
                ap_NS_fsm = ap_ST_fsm_state36;
            }
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state41;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<41>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void forward_fcc::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

